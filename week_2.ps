%!PS-Adobe-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: week_2.dvi
%%CreationDate: Thu Oct 11 08:42:04 2012
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMBX12 CMTI10 CMR10 CMBX10 CMR8 LINE10 CMMI10 CMSY10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter week_2.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2012.10.11:0841
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.02, 2009/01/30.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  /next ED 			% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge { 
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  GetEdgeA GetEdgeB GetArmA GetArmB mark 
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  GetEdgeA GetArmA 
  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
  GetEdgeB 
  mark 
  xB1 yB1 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2009/08/27 $
% Version         : 0.5 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 107 2009-03-12 17:25:46Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.21, 2008/10/15
% For distribution, see pstricks.tex.
%
%       HISTORY -> see file Changes
%
/tx@addDict 410 dict def tx@addDict begin
%%
123 srand 			   	% set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E692F6C00B521F7AB2F32545952358F
0D39246DE215D0A7EE67F377E81F9E65B25658B7FD97FAF98C7EA9161530404B
62B9AB7A91C863095D5433BB06F9A29488DA84D58A1394AD7878BB27E3CF4AF1
BC29DC64F319758518AB652F9E8BCA586D3D2021CA860F84DC0A2F61A93B6B44
F08A7F7C5F36FEE9F5D450D19F72C09580DDE2B3747D8A1054981BAEF31D6C42
040D7D5F37DE6DE019849E7C7754DD27E9511F9A9AFA4FB727695444F739448F
3D2021
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC8944C70F30925FB48A16342CC26D444F54CA15E5A624C4A2DAA2AEF8
404145BBA339F2A2D6FC2F3ECE54387761CA1213C8D56FF96E37C6147CA44B84
262EA87E7CC10D931E6B5B80D7F09813498497AA84ACB4AC69BC6C8481ED2953
084F560D7B1CF90555E69BD2AF7C5D944E8E3506165014652462BE1BC81CA341
E1B0725159D36DA0FFF3577D1DEBC5D91AE683FB0384
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LINE10
%!PS-AdobeFont-1.0: LINE10 003.002
%%Title: LINE10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name LINE10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/LINE10 known{/LINE10 findfont dup/UniqueID known{dup
/UniqueID get 5011940 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /LINE10 def
/FontBBox {-150 -150 1020 1020 }readonly def
/UniqueID 5011940 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name LINE10.) readonly def
/FullName (LINE10) readonly def
/FamilyName (LaTeX) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /a40 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE366EF37D4823F376DD9F7E4CBB15
DA8E93E91E84D36BA5A5B06F3A46B45692ED11C8FC76C0B0B3157F699878E2ED
D89511CBE105EB42FD76309DA91EEEE85F1AED9920648285111A1690C4AE2638
C0601A7DBC8D2D41CA8C4F9DC7A6AA5C51015D8BA926831892381DCA7E61E230
5BB3BD5632D276B929D97D4836F9703461BED94450CDD2660430A0D13F49EB47
72EB0371E38B92F488FD6E19C944811D4AA52CCC359210320B484568E5060BC5
4D2FDAC73C49BA0168EC70388AF54EB24A30387A41246830C10472DC40AA0BA7
BFD5FA9A7730D9FDB4B639665275683C8E3CD7E719FF53B6DE1F5835C06D1671
1185AE2114E4BF5C0836BBD5391FB7AC5793DB4D3C5535ECB70119CFDF567D0C
A390B1D9A992250D535CE1C36B028E3E9CFEF1DC5E0626C58FB0F25E04DC1FFC
DB6A1C67E40E6435D2994BE814C695B48D64DE30E3F9A38D4547B49FF66829A4
9AA4FB9432DD10B6AFA88BBC184BE95E34A17076782DCDFED010CC19715BA5D4
5D525F33A6065EC6C6811F7D8AC94F27E4E2EBCBBDC3AF1AED1016C343825BA1
1DF58B80CA212DAA2F4EA1889F989C99972A5FA25617CABA3B52190EAA98C27C
15717FD85CDC8CAD43292A21B341CC2A04EF383D978142D16B4A97EBF22ED674
0B45CF5B2C3F151029B75CFB6FD2C53AB88066DD793B85CB7A7A13694C0B865D
BB3315043A4986FB138775B7354F4AB89AFD27D52E0864D384397ECD9A850511
E96A85AAC591975E185230AD05DD19D2C6883B2AEE9107448928AC6959BB66AB
7F8F7C4BE5E6E4F88D3BA98B117C9F0F58BA8D4A7B88413ACF98B0ED4A5FF6C2
5F96EDEC0AC75AAA7C2F27FA3DDDD0B3BA0683D98F99A282C799183C0952DAF5
A900E23342D083E8454E64F9984EB44FE0929E8C1605B8B26C37A219ED8A04A9
D7D6FDF3546CB443BB11B2E4A1015E59E8AEA265CC70DEADB42D8361F4F54979
19ED22A9E83B7C851A296D1B5F44AC57AB4EC29FFF3C75A20CB3C1B57EDFB4B2
1AB1FC26A6D947D45EE8221185749042F2896A43FF932AD70B16BC2AD7982D51
C390D752102D4A6D49F0205253618EAA62D3616BC1FB3B7C5F3EE8F00D3EED1F
A096AED8381876AD3B6904E0AF7AB1D15ADF3AE26C6A34BF3E4ADDCADABDB3B2
555060D5B4A10F822F20E8CE50C5DEC31FD08731E0A3A01969E9FCCC3CB4465A
4F33CDAE3550B4FE6DED172EBBCAC6FE125694B394CFA2450995CE0FBBE518F5
7026279B415F056B4B4E9C4D28A359202A64CC998BF9E1E22F6A48968FD76572
65B2BA9BB7081E44A92E916E7994878FCC087F16C6E2775DF2EFC64DFF9ACF2D
8678A9E608C5CDE46BE96894B821EBC52C42FFEA17E40D9486B5DFB0BBE6FBD2
647E90E525C5E0E142AA25A56011FCF718D71F1FECAD91CA629EC72B731C8060
B25C892712D7BD7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/UniqueID 5000791 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 42 /asterisk put
dup 44 /comma put
dup 46 /period put
dup 53 /five put
dup 73 /I put
dup 77 /M put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2AED1652A132D66117071CADB8603969B3A2F97270CF2AA8EC2AB890662FDBD5
00EDD53F16FD0CE199660202373E2EA28D29245A4AFD3A63695F6178406A7234
AB0C0FB1B19CB408E047BF014BBEAF4C9C19445C7819748F082C19E6E355EFDA
BF1C2DC348AC0AE6777F679E2F62A0A3EB19B7F08114AE0E56A3D310D6958AA2
348E1D304BA8C4389E525553A8791632EAE32B6E8D2193932B44D230FA17EDC5
7D407CB83D2501B0D2C9E86FD23E21F26DBAE2550DD4ACA051EA0A0030107676
3643176BAFB7DF0A157151F7625E63296E325E2C3E74BDEA10C3DA37A73F9972
4821E1E756D3DE2C1FB121371432AEADF3328894170304038253421DEDED8B45
D4B0DBF3B4F29F053C44053E14ED09E3E7A0FF3779546620D4EDBF4044F0E2C7
298FA689FB2773AF7BFF8AE9676E93236DAB306DBE41F278111E4A3DB5A019AB
687B078D3B647844515AA0EB0884F141C8A138514DAA2B912335544A0768AF64
83293056805F5D584C42B434EAE979E707ACB07E1F27E9BC0CB00C1E3165BCE4
67D487CA4FCB8F7740B1EEDC4406EC6AAF49E039BAC93A33E4F536F2783B2A33
138F3DB19418D8FAC898231DD4B61112AC9A6D90A20485CA6CE99EBF840A7762
8AAE30A7C970B5F9F2D2B13263594383D34FE36D125AFF7735B248EFCAD1308E
8E2E8FF8BA83A3AC4969D5F18DBD5928FA7B95996B8D0B5DD3D9F0D7F22FAF42
427BA608F9D10E3D0F43B7B74B68DB0D07DE0B6918AA39D8FCE8D81FA9DF5D39
B3039E67E390A8B677F71CF7EAACB83E7A32BF32172213BC9CC100FF491659B4
B276A962DD8EB2A51B2FF6C3C10E1ABDBB7EE11DA1275A03933BE0EB02CCEEEE
021BC94C94B22F3064FEF501582085E3FB9F5925F89F60269027B69384DCE091
E086963E19B5D7DF639F0BBEBBB1C4CD4B519810E78B60E193AFC5C66B8E4D3A
F0074220B52141671C1EEED0713CFEFAFC54D929EEA77D0EA4139D09E69AA5EA
AA5FE691924ED6F0EDD319B52865A9EF1693F24458A0E63C9D656FBEFB475B7D
E4CFD0AB6CF8BF75A7F32D71F34DE70DF3251615E90F6D338BE74F7389D4A6BB
3C6B1FBA62E0CFF3104CC18C1C032CC0A3A36070C3E1324568A3CFFB01DE3856
59461DCA586E1D91B9AF2693E156CE75FC554EE845642152EA125D909CA25217
3DADBE84D7A5B8293A527CF7A386C2987A10A7C3A48C1036BFD6882F1C2249C3
E5341D8EE468033093B38E7063D774894508B77BDB4607D26328C34BF8CDFC6B
E3E9D20C212C6233B79675D0699E015EA0821955A77BDCBBF6692D99ADB73BD1
561CBA1FC971C16240F04CAC0BE0AA56443884A82BE4B00C0BF7CFBA2B12EBC6
B8348F95EA1FFAC42A668D6187A4D0E3EA9AA1CB0D17DAD95547DDADB3D21AFA
4A81D121F90452E8043720527A989665501C2B041D0BAB7E92D2F4861FA3B70D
0DDE8EE6C88A7E109E520045BCE7464AC44D69FE9364A96A079888C5EB7D5F3F
6E1D92BF75B02F3ABD56BB9F1E8A5748538C24EBC2C42066F2AEAED47F6B432C
43F3C73611C8C4929779998125A77A509403EDF2E33053C34AED704627E5D1EF
E2785A01E0207348812EF640A46708ED6E41C38834A968F5CFBDFFD9645D54C6
EAF4A61C5B5A5188A00FE5FB94C9FAC99AE43736CA38711C947BBB5AB6B7123A
048724A5155772763523104CB35B2E49C6AF77A5F6F724E59DCDE8112F6F24BD
6DF789151E3621C370101AE2DD0F4D7AE992045A92A80CE1DF5AE759173C06C2
ADE4A1C06130F8B2A4308C1B187F005C2CE36D363AD9379F22475C099016A00B
851BC828F17C286093E272BDBE5C1C4305945BB5B618CC5CAB7F3AE9E51B68A6
6AFDF6B7A2179A6D680B3BDB3826E5CF569BB6794585FEC76C51B03B25404BCE
A7D8EB6A02ED14D3BB4E50B0A727FD89B4623990B0FB88BB253EAF79B989C578
1712466E67FBB20CCD45C7D856E103B536A2D752A3A99E5DE56D776BCF2E1DA5
39141B58DCD817629B9F41DE127E14BB0B0DBCB26186583C6827DC5B84CCD15D
70669995595F7ED33BD3FCC8D4DEE8CF8030C205B936072F17DC19B09D91978D
44176E78FB6A725BDEEF439AD84438740FD51DFE90DAD02C1AA4B738F8BAB09E
1C98BDA1CF3571E4FA4E5FD26854975BFEC78B39A4D37D8FE97C9847DD52DAF7
D7C8617F42A4EB74DBBFC7CC5FFA1C229FDC70EC77DB8881EE0BC6E0A0880291
19ECE0092F0274B3D12A1B8BFEF53235234BE0A4649FA60DD359BFA368C49AE1
31F516F1C500CC2C9AE62925BF287248B5C080EF59ECE1F6133CD52E3CA6EBF8
5CA72CC1A05DB925EDA848BD148B6CB80E3079E075B3A68E7F9A7E03FA1482CD
20D9D079AA23FD92F90C932DAE626765EE59E08AB7236044918EB9833DC1EA31
9F7F7DE18757C89CC52A5A01C12D3033CE35E04D0B0F69199203F4F583D7892C
1D90E5D0485A894237ED48B7D40567284DFB43091AD6287AC2B6E659D18C224E
75A7AC16907F5148322CFCAF81FB304C45A972D7F19ED581E99F1F871D0F6C2C
9CFB5FDAC7FF05BB26F22EF9E963B34B1E51255919337BB3BA63C8730DF16692
59D5E2DC2158BC1898BB03D1918DC1BE2967D4B60299132A6108C5AD24D3E041
5C21D903907E7EF89C2F8353587116709DD5869D9485E1CAAFB4866BC785443F
B9ED91A0B9C69FF174EB8B4A319F494C9C3427C91C3AF9F4291BB8C36DD99300
0F19BF7F262D7B24AA0F03D3DDAEA4E507B5DDF941B382242EB70E0583D57AED
22BFD0756CFD54770E2A8D24A9421A88CD1DDFFE860ECAAF137C6B136F90A93D
35044E102DEB99DBD5110EC6CCB24D94EAD2362FBEBD81489AEFCB9A3CE17D3E
D7BBFC33D6E1031A0C046D0BA84085D1E38EAF993BDBF36613966DFCB27F0B28
C6663BADE614E71A7EC0D92F036F83760A4F52C3AB82DE17B6F865323FACE57D
6B67A674FEBECE24B7AE80D55DC9919AA74BAEB0D100EEB9C2CD3C5DE907504B
5F74D3455BE9776009E372BFF54BA4FD386BE79456D5F59050C705AF017298B3
D43B4302218886E6969189182901DDBA7742F2475E9CB4298E2C3F11D08C971F
3AE1E6A738E87D573FF31BFE270D838BBFDB428B966F923855084C533931DA57
D7A58B95889F27D64C840F007216038ED7C8B53ACA1D4B552F9A66ABBA44926F
88892A18C9FB4E2199F5F63CADE82730492027B346FE635930F6636E0F9031A4
B9E6DDA038630D5C05FD694F6E9539D3E7A0B39BF31C26DF394006A086D46FA4
3E5897C95F6F491B1A2DFCD6E633FEFAE323868349B3DD4E7F97E8D7156AE03E
99197AB71CEF53A1C0857CFBC22E5D96B1D9F2A66B87E6E157813F6EB34ABFE8
8764416E289EC4FF05D610D0AD1C8C2C26D70236CFF2E4769EEFB0D7075629DE
5243B3C12EAE871102918C95504A13C7441651605B3EBE4445F455D96CFDBA70
FD47CC98D2579D7366EF33ED3FF13189A1CAFE1B25F542D91AC6EDBDDBC842E4
5FCBD859799844C63A63CA309E8F59CDA3BF76837CBFC30DE6568A06BA670932
3785EE21BC11276C948E2964658E2D1A46E273D95A5B7300916051AC8DA8D8CA
B6BB95A997BE7C612E0880CE76C26EAE556D4E517617E9CA88554C89BFE47A32
12442A939237CB11558CC36921C819360246A5FC1CCC72B9775242CC6E9BBCC7
04ACD7C3F36A47F4D50CE74A84FC00746A840BBBA2F1FB4A0F7D951B4F781411
987D2AECCACF4BB57C6C1ECD6940E9E8FD8E80F6116F2DAC8BFB4699662A2F20
CF3DD358574BC9A2C94E268E24357794F86F8C3939211D2E9BC48E08C2ACDC5D
A5A777E05A18687F5F91F12D1BA2E15D9AB992362A2E89F380EDE1B6F4A7F8BC
FBE3F9EC6F7523D01FF30AC4DBA8CB4AC5163D5BF945673B3DD08E5308A61E74
6865F612AEEEA9F8A656F514A59D61B5567D41B3F3D29E1A7CF30999A822F57C
1EB0B3B13DE670F5419417AFF68B5789409C258237E84B4F4672318CDF758991
E2DDE6568269F5C9BD3E624774AECAFB25F3CB5842F0D489E443F1AA10709F54
0BFE0E60E1C183AAE9D16F22942937F62818474326331CFEBD9534940A93C606
5DA2A0EBCC7E875A64A846CE2F5AA28D94FFB33CB447496270749140F6737CB4
E5AE203AE327C976CD1F1287F41D82967A96769E497AE1B9F323146EA53FFC69
3955D5546BED50ED09CBCC556C6DCBB4C00DB316352A54438F6E8397F4775301
0A3EBC81D95FF69A9915CD65B8E8FA344997ABCE2F81374FEBB8F176581FE042
CDDCC208924E4B22E10AAA41FE1A1B72EAC3CC98A97386DD634D4AC3F9BCA86C
240340179B7A06BF8D9F12CACE42767E7F04118B2A264242CF07C07BD5784F2A
A68FF0A156D66714D2D709D2A31EC44CABF4BCC638BF4488A889C2B9C77EFA61
F2D1C9BD78748228429A17A81517AEEB8CFBB7D562EDCB85188E05634A46297F
AC1E91B3BDFD51DF5BE4E85CC054219A606ADBFCE4B1D8DA5B20A4B0EBCDEB6B
AF5D25A646A51F294390829E0AD6E6C13574EC0EFECAB4F69C348363666BFBA3
1E8AC08AFAF4596BD46F8651510D34C9E62C8362A1E99EC3508D608DF5179E87
51E3C8A0CD2E9DC855CB9B38D9DD9491E95EEEB255B31BD254FCACBE43A63706
BD7A952521A76005F21B547E3975050C89CC83D4D40827AC5D9EF914F5A3E94F
D29081060D38FB5AD681E187A87CB2B8885941871588C0CFBE16B8669801136F
AA805192360EB84E274292B98141659889A30DCE96D02889004CFB253F72B7E5
599CCFD94F503FE5B526224128E8315469CAE3DCF24194F870909B10E186C811
F547DF8D4AE9788076491C0E842CF222C24F3E980C2690EAF9923844C41B7EE3
3DCF5C2E244DC855E8B9C95A47D37AEFD919199A45B4A8381F55C03846E6C389
7E7E672E5FEBD1537443ECF961D7B5809306CFB4FB06D48898E749A05D27C521
923C0976A7BD0CDB6D9B9F1301DBE31361870BD0B2850BAAB45A1DA1A4ED23A2
BF105D79EE0495A9EE6DE1D93A367EB121D38CE79E3AD7964D5F7E94601A3ABA
4BB697505CD1747F2C8831ABE46261B648390C4BB3711BF5C752E5AB0C05264F
8A613337E426D82D66CE516B24496AEB2BBCDE57F9F85E718A9CF5724EFA24A2
2BA01332637F5C0393C31A4BBF0D3F8A4C0731E36CF1362342CD1E5D44E18C60
DDE2F92DF4767A0B33F39BA6CC824C2015138C7B7378AED820C04518EAB15105
AB9921E5B90EEC5E6FA7929A1DA6BF659CAA133E143975E3F39E64799D4C49BA
829DE71E5801C3CC973F511865536867E2795A26C544EE2C97D2287C787AEF28
65BC6C60FC7476B05EF033F31342EECDC1DA5B9B01A076E28AEBAC9EE8CACF74
00858D0A2C7A6ACF4F53DD934312304F23EB27AFA1EC796BB3423C603C4027C9
41CFE48809ED42BFE0A6A9F4007AB0A5EED0276B989BE46F9C8810A52BC5F967
F2FCC9C3E5CE18E09B05A13C11EB6D9CCC149AB1CFC259270FCD382E3A42D055
F07AF797DB3E8C02E01A924A48FB39879969DA06CD1DB91F7C54801B203B7607
DF3FEA0B3F304556022220458710E870756AB0BEBC61648EEE3FED0B151F7DE8
9DFE154534DE07F2844C57F019B73D67ECB4E18B801D78F8FAC33138CA597138
DB730941E19F879FD3119DF4FBF953337F31C2FCC15AB88CC80AB083F0765C78
8ADBCADC15A13F8F6366376F66C7F8F99DD8F7D0980350ECB5AC93AB34B5A953
FCC6441C02D05396235E0E22F50A05E3F1545FC97EB96435569758524F623445
DE95219661B86533EEFB08BE11D065001BEB6BAE1171C02049B37A8AD4741E62
8AA9149FB42E205D2A1B0E542398D7309AF0856BC5A5DE8FF068C96F9BF372C5
E2236F63FD42D5B96DB47654BC5811B61E2A3BC2B3D11F7A361850E150422CBD
C5EC7EED5B5D14FE681BB5BDE41CFA13CA06EAD91F0122A9C06952923971BF62
F34F8146EFD39F790CFFB6408A1A115080B22C348A832C5BD8559CA3690BCFE9
48E3F5F00853E3938EB883FA4C0F2A8EC2611C97FAC6A814CD5E1947E56892BF
5BA1AE87051A420AF19CED5DAA1A0920C0B0F7520C442C1EBDB7BA94ECA332F4
7DEF5D92DBFD1491A4F1CE6053F1ACF972B003B396F5F667EBBC383151396C85
39C6FF5ECE79BB1E768785D5CC9BB83D40FDF4E39637FB07D60CD59E719ED65D
E66AB006DDC05437061887035623AB8DDEC1A453C4EDB8C7C5BE79299EA2EAD4
CCC0235F39E33D12795AE63036564366AD1183C294E8E403C89B531BA7889A20
50198184C3FC65F9249E81B90B1A99D4D64208323EFF6BE25E4B4E42EAC0FF69
C8227F93C8E03D0D2CAD3CDC646028D16EE33D1029F5E6DB7BA39DC220AA792B
223C905483DC74777C3920FD17592F0F8A8884F91CAB2498B5B4393CCBBE8B98
1A8EEE08A3589128BB42507B524B622FB5AFE17444CFEAE333C50D092248C8A7
2ABACCD78773AD9CCF02657935EBDD67346800FD7496FBAA23F02AAB79209DD3
FBBC194E26E737975A97A680009789A3D1B8B3EE4AF65AFAF0868132D99791D9
80FAECDC204725D973E926AF51E4EB471D6436FEE9FBDB412D245E781C7489C3
AAE796EE5D28A60102956D599366D312F20CA3B54A306932A921201614DC9344
7F6EBFE2E29EFD3AF0B700DDCFE856E65F44AA3E94AF29E3D7A90163E045EBE0
923EFB0CCAB7CFB07C0C187FEA76A83A22C6A16E764EB67E149A25CE9F8E3F4F
E791EFF787ADB42F9EC5D4009A37DAA9CD7903757C6BCCFAE6D044F612CE58A5
A98F31D28B0ADBE93F9DFDDB7769B2B90E7F131E5969BB227F8B1D00565F8B3D
E0803D41F2187D473D58C20D59DC352498A45FE9D86E8F34DE80F7A1A09D09EB
FEDF31971AAC3D26F9FAD0C3D5A77335AEF78BB8BE30A1F09F793589A5728CB9
2445845894D160DFA477B96064506EABBEB4BF5DE8C998792BBA51807456AC4A
2DC4A18EB591159CCEBA4671A7636198B3238A7C91FA6437AB483C71480EA89E
238E9731750F81312D63776C2D25F4CA2B2F44499704F9E4980EF847D3FDFC6D
317196614186675B04040F9AE9202E93343C035594E40119B89E31691A724BF2
8BADE0C015CD57EA76C9658275D4A53A6E2A37072859D5BEB49677AE9C81876E
93875B4A86811A431B05D132731CC0AE8AED49F603AB9BF53B2E9DF60650B8EA
B80692C82498116F519EE13FF1E42CC1B7C47EB06EA441B6D255C552E66F5702
D199E0E3C0A2DB288FEE582FE0C300404D2821D094AAAE77A32BFE2EB49C7258
5E614B7C0C0C3D1FC533A8B21D329C8A3CE3297F7ACF6C6844AA2958F5ACE852
5C0DD8D3BDBDE925088F2DB6823E9B4C86FA5134422916FCB479D1607A7B74B7
6F4C4930C0B68CB44D92D53169A313CCCCC7BE45D97C67F2DDB626C682EF90A2
EDA2E2E93F9BE952D872C0578F6727E7DB6671530773CDB0D43E8D1AC55FBAF2
5E719711513956119FAB6D3968568B7AE72DA3BA4F3B8DD74DBA15DAD1F09CE3
CA8555AA72D30BEE8FDF807B9D13BACDE6A76F919666ED91203A9AE683CF2583
424893080E39C53A30178284F3B60EFBA2D5F604E744E384EA7DAAD66C5A2AF0
3CCFD827CF54D3D60D2FF8C6F68421A044A32F9CB79F98B4FC20AAE8F548B67E
C29CEAE2E04250FB56C7DCAB212D6A42E6DDBFD2ACE825840C433610517EC731
6118D3B505BBBA7C6FF57C2FB864EB5D95FF274EDB7F5C39DC6C7D1BE65BF1A2
6513BEB8489CBE7215F67695C9925921180123CFF96B063718AB336D683BCF9B
9C9EA7B5DF6F20D313D98BFCED2FA9AE962DF61BA2B62558CF23426423D86E03
25B393CFE0F8D0DA56C4DD7D66BF28DDC7C982B4C27F4CA8A109C94F4BCF3A69
5669B18F3BAC688831903450
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/UniqueID 5000768 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 58 /colon put
dup 65 /A put
dup 69 /E put
dup 77 /M put
dup 80 /P put
dup 81 /Q put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238BFD85F8
8B0CC9508AFAB7292EBD17DB0F2BFA908F5E9FE55BD80D0E09A13A99D6D78365
36BA7593CE5543247D66D8891E5DEC2B7C87192EFDA892E8AC1E9B559A64768B
17FECFA7C2E70A4086F25183DAA9D885540C6F70C1B6E7AF8E11BA4798C1DD2E
B7D4F96208BC612A9388E34CF39ACB4B8C228FEB68807EB097161CBDC709BF2F
6FC2F82601FD622A05CD8D002862185FABB230D76693C8E5802D2FBD34ADBC0D
48CE7D308CEA919D0D096D862AB1F528ADC04010B860F00BC7AA6057255A7DF6
BD8BA147130E2A1A77170EE1A71D3E5324ED3BE8E62A7510075ABECBA8375A5B
8302ED28F97F498371BAEDB7B887A8C6479AECBDAD3753FCB981B4C8002485CB
219AD22C6E76503F3FE34DF9CDC713AF4DF00F86FCCA06B7DE925085317CCF86
66F070FC790A98BB8F77D161F6228107C92BBA3269401E1EA1294A88CACA2481
C23A34DBE22090B97CAAF513C5DE8404F8ED72CF2BFCD6BF52FAABE5F2F227A0
2720AB8ACC2E93B1551E750DB24390D7F0804F28A5DF28115C48E8A3CE743729
E6C7A602EFA8343EB64410CA9701D58A8335D97B202A5FF663188CD00372D5F3
5ADC92F10775089CF00EFC3846B680BB0FB087E054E95E2F884193E1D5FDC28A
8A7F6FA6EC89007816A77321A30DD12D6983FA9D95A67EE2C1C07595C0A0E294
28F185FCCF89BC0778B174A9FB4F5872BE9544EEE598AF63E248E07AD608D109
2A5B8824A3D35CD75534BEC2CF893B0D3DA4B73D66460D19A6BC8AF994F0682F
8CD69B4ADF316B992F547DE9372FEEA0BE4056DACE51F403C670E243F0B0EB97
936ACFC4BC3944706FE8E746D583FCB93802D72D75FDCE0627BA449F63852A12
B4611430079464C46C97FDF14276133933193A1B3B110F97D9D17DBEBFDDD97C
3713D2D2751EBCDB6B4D935084759EDF04501654D663389C4B5A8891EC5F847F
D1436645616AD9CA16DB22097AF5BD0BF871604DCDA2247DC17C53152FF513E3
F41DB89267E1B6638CAF87F553DF1954E4A922DD1B68A0A278E0260A06D22541
C48A82E539E5AA12500ADC4F4E973D98161B2251B235512E1AF68C3B55E11E87
6917EF04AC175F3CFF94ADB3437931FE69E9CC7F7E0C05C400CB250C5BF3BE38
2D95F8E1768285AF0FB4A3861C67A4DB25D38D5A93F19EA07BA231E3F317AF13
0FBD57C677121FAD39A304CB7DBE02F544269DAEB43889C7D20B7EEBEBF6977D
FA32A05155FFF7E50BBAE6E3FF6AA5E6FDB6827637A8042DD4809F6CCD8766C6
37919F05E3BFD1EAC2B12D96DBAAA15C2BFDC446E8217DC2E35350718D28AA6D
2CE7C2E3F9FACCCBB612308A6A8EA051F2F2E25476E6941169C6F31782165859
F27B8DC4C5D86650017085B1C32432485155F9AD3A612E2319E6B18E5AF0F5C0
33B83F3E2B5451ECFCA7EB8C910B341F8D147A88D61C5990E609001B853B273D
B145ACD0FA36C05D5E9751479206E5AB752E679F729DE600C27BBA3C34DE43B5
31F84BC83F4397E5E9E62568F2F339CA66CD11E814E2F81D45C1983D8258B563
25105969EB1ABEED9E395F1F1D59C25887BE91436BB516637CBC0CDC3AF55F14
043090D44EE8874E54DE3990D3E23603005A55E0EC96BE787EAFD38CF82B54F3
E744FB7E568035EA82954502887B4732C364400B6E8E3DEAD9ADB6D9AB42F69A
32D519CDA563699B1F7ED154A93134C5E80B618FA651FB146945338971D7BCB5
F3FBF883D7272C2C89F97D0C8D1DF45ED1815D1C660E5059D734EFBFA8702148
5271777579D9CE0C778599803E14B02F760E34BA8E1BA906B4149F059E75EC7D
AB746D13EEE81647141D23F960F63EFE2FC361E1EA453299493D312C76192221
83666C72993BF21DA93935F90595BDBD4D274FD42DB4B5087EACC84E85075B2C
348944A024EB5126CF77C5E802A47BBEB15305A174BEB44068BDD206308D1F4A
66D911FDA96337E7A85C91BC60885A51DEF9E9AF36796033A3ED23D6194A5CE7
9416C444055305F98041C13A2A98BB5B1CAC33F3E5219CD112BA7500BB15AAD8
CEF6A8D68261CADF494D77FB9384FCC80431D207A6E32869E472B17481A0E23A
DEE49D69AD360A543C7D020BE995BED6CD2F0AEBB87FEB5110E29A7A1975FF53
8EDC7C0D37A61E3C775B46790D67CC08A21345CD183E5F70C838F67960F4B59D
5AAA00FEC14578B73038B5A105F747711691D8C1ADE03514550395F5A21DBE11
C89C293AD6CB2415433D38B7D4D7EA51FC6D74136744232FAC7579DABE52DCBB
D5DB87717292AAD81E5B4186E8469BA255DAB66FE191D138E9E5CEE2E44613F0
5BB27CE8BB79C5062B6932A4B7B1A4B466EE7328BD62056FF7325B5502D9A2C8
B45CF458BEC2AB55E89F5A8927D84FF714A884199C66B2C9E2CA266753287FAA
1AE38EB626E9A41CDC6BE62BC7BC9D739929DDADA413EE35894A6A5B14CBB136
548C42C2F2B8B2093F9F3749B84F640CCBDE753BA884B926BE85F35B37A10125
D1E9D64B94BCAE0E89082ED1857F41DEECF2B5F42E39023760298026D207E2F4
5F58FCEE6770631FC7F4C87694215EE8803100FC96D64FC41BD253CD770C5FF3
CE32E2D28D71C732519495E77B94F4FCA4923CBDE120546E3ED45EDECE8A9243
E3A6697AEAC8555DB970295B46D0F84D580E64A869F708EE80E4BA2C0BDB7674
AC29B751078551D349F269C24ED4E260ACD05625735DABB4270C1157555524CE
D29E24A260F78BD34DD271B72E81E1368D9719D70BCD65E979763E48FE8C6A4C
7CD957E07249B2B15A424DE701B72705AEA2DE9EBF7D69C8B57DE6C0FF59AB7A
DE030522E73CFFBE4201ADF4B10F411E2E194F5CE95E0A001853960EE21F6A2F
7D4D6262747ACFFD9C16C55420E33C62B56B923359D30BA345C413AAD2078B8A
C187B212AA71CBFAC09419502A040CB4DACDAEE34819C8FEB4D5C3B59C326B2D
E81C3459149DFA2E35D7A36ABF1EA02D3415406E5301F122F887339990CC219E
C0512EB06940A76C95830C8746142CCAA4BA28D178E65E5665C1B4B6F7E78480
ACFA7D57B5FF70CCD621CB9B40A1FC385C3A2D5F876F7DCF27F45CA1E23B977C
78126F21441D3F68DF94FBE75F2C6794CD91BD788D8F26196274109C0C3CCA4D
BCE008E74C495CDBC55EFFDB29818395889573B922D0F4C3D2ADF9BCBD60677E
F5C3CC5D62987F1BB60DD6B66DFD646EE28E927E7EEB9190CFFA60202C4ABE97
00E33E73A2285D7F49C8F66B5F8754B06094E1F46AEFED7077F44FA4CD943B6B
0F2B211FC57131A19C1ED51E7577799DADD1A6BE6D494E6F95E4C1F88B190672
847F68059C992BA094DE2D4D77287B34D1C25E39DE6C5AE56D1DFF217448A070
AA25A651313E6051A98AABE1BF51FB3D0EC8642AF6BE8CB5282A6174BD037EF7
3BAC962CA96CC1FE73671D6CE1BFAA6099AF7C951512BC26F103E6DABBA9E265
635B4E41B0419979FA2EC0554F5D919B02AFD6B5AA23DD387EDD0150E278DF00
8787E9957EFCD64F6030B2C74C6BF2D5E379FAB80A411CD42835BBFDBB6E7A10
4D3408735BB8649C878E32EBEC13722305D9028764CB1168F0628B8B3A55C9D9
29E581025757EF6DEE20D4A1B75AEA417A20C987DFCB9C4AE741809509AF6AA6
46B6D31A838146AF24877158C311B4D39624F8AA29A7FA54B0D426D57E506752
5FC89CB92CDF6F7C6B0B6113FDBFB62D30C6D05C7387DA4EB69EAAA1A1E332FD
33F6F0AADA1F38590662DEC9C3E5DF8A77A506FDF3E1B1EF1EFB8B0C36B3B345
0F889544C5DC72AEBF2143CF4C2B09DE2A485C11A7D9DF6BC9089101767DF704
D969EA75D4250A00A70CC183DF8270CE9F06843E765E81A710F2AC0A546F375E
E159FB14687966EFC0AEC51B6DBAB553EE13AE368ADB808A51622F86CB57CF85
29DB2E1F24A83B3A075B4A54CBA7184A8084F89E4001DAB686456CBC32C8C73F
8BDD4596681459B1620BFB8A47A47CD458DF6ED9F8FA21912CE879D4280A7D02
C917078D9B99C12852B6E9579CD49BCE1DFF8F1E9CD8C4DCFEA287DBC8F71C39
32EEE241576C2C401E250B120BB885794683C12F8893FADC54CC0D8E6CC104E1
8D9C6B1D8ABF74CFE803D2D749DDA21B2150AA78DFD8E1366297E0BF294EDFDC
A3FFBEDC1458A0F4F27445EBF3A511A7208795EA59D2ED203765F8DB77E074B5
ACE7C49E46EB1BAAAA440F79E7FFB83705354A0AF0D998F916BBBA92281F8617
30E7184689B56A1BDBC3315E8C87B105ED542BE0A20AA749CC2FA2834E3DBE96
401ED2D16EAF28A30EBCD0D16A004959C5F6C3B054B63914F28130036869478C
3803DF2E595A45B89779D78CD58A08549B3EE149554EB952D1E83A6FC002DCCE
BFA84BC1BA0E187AD13D2D4EBC8A78FB7D861227FA4E5E8F047C37FC10EE6FC7
928E60437BBF38808959532C7720419857AA6FFF7D54425C0116240E8985FB70
008EB0EA324E022D3CBA828750EC944EF506A0D77C1AB9A16CBF771398EF815E
79E3D5EE18DB36351F67A93378B63EA5808BFE18227033C93DB647EB4F2F6463
AC76FE854D0BF8D856F761CF0F9CE46A734FC8A6B5EACEBABCC464275E45397F
9A8B665BB11E3EC2B0568A35DFA3F0EC48FB1F280FA2B49D1C5FFE431909755C
81D8752A8D79DAEA93F4A11CC8A67CB351B36F8298AE31DFB957B0C46EA0D54E
EAAAF595F8E0185966F4475369379F23F7993237382F1C536922EE6A3E160BD6
EFDA879CB08413803B351515A35A9C27F4AB8F04498048C117F0D0567386D29A
B6389456B2857B01721F235B916BF7370BE5D0990B1B1F50D5F92342EED8F4EC
A5FE0C0EC7BC6A7A1450EBDF3378EC1211176D1F18D1420B3AAA93F91355A69A
B70994BD01F909C84B47336862519B3EB6425D06959AC93681854E6A769EF646
3C5FD36AF735E0BF3CBBCE86CB1E0A4FE17E5B550E4C71A303ED8DDB2C2E3FE3
894D505F248F29956A05B78B0B8FCDCE0A73E34BD61421E803CA5DBB3EA41D29
046BDC3ED0DB4D12C2A511EEA051251E75BD6A8C45684DD6B2C52ED20A5E7236
EE66EDE6178E7C60477EDA944F8AD8424D458772E0F3F3B15CC113A0D205D8CB
876F63E50121C72696DE39087E7969EB18BA4DD295682FAEA71F59124B874AE0
DE4C0449DF088EDB0544531B49D921B15F8233CFE9D58825D1942AC197C9A003
D9F813539329D85A64C533296C5056303D8F17A11F2E7AF46069F6551E858626
EAE51D47D67482F41BD774DF48D5C4DF7922C31D4D556D117ED33D56660BD81F
4029448D8882398641DCF2E2AE6A3B8B3B824DA4ADD60DF34BB9B08A940D8661
79BC5790BF89FE5FE3178FC0E20F85A925FF0C1795B89277A2C87583FAE2B935
78DA24B3E5941F69E9CF66E796BCD08DA724CBE672A9C25097C6D82046EB7BD5
EAFCEEE49D40E2B970D287F23E816568BAB42EBBF103B7CDE878D4F376A94C67
F3EE4D176E0A8B2CE71A867C06E022A4CA7A1F789697696D5940D4FBA04193D3
2BC1198BCD3E4DB9F92F97AFB6DDF3D8709B15BC0B5D5F92F12F0DE89C0FB102
6D0B138CE6E679CF32C48B65D7D3329EB538F1EB3171877C7AEC59FF4BD99147
2E4B3AFD41B0E6C5A038729B2BBCE844298E2C1430D5D8D33AAA48D0FBB8DC2C
E24EBD7E6B7F7A565BE36638645873A77A701DEFAEF1D36173232DD49E8502B2
348DA6963B2774422EB1170BA52EBCE7AF3175983A376A067D22226DA12849C9
3C82512B228BE1EDC4194F1012D805D2456A98F4BF2B3F6C28B77FCDB6B2AC46
62E41BAD0A86426376E2C4AB0973387094BE4E0F837DCA1305914C21B3E1664F
3E96EB9EB2A172782A392C80D3CC5C5DF3BA45EA6D558BB730254637E5735B91
7AC0385BD6B3BAAC185BA6C1AF434EF00DFE4A8CB5081C1ADD7302157968A4BF
60AB82140EE652F78EC5BBC422BB942AFF1CC7B689083950222FA43EFF750EE5
EA94426FD2FD3663A6D735FAC88ED252C47F2F1803B1D8B2DC159410C0441F9A
798A71EA29FDB76A8EB953686552F778EC5C6C938F17C30201B32440FD62CEF7
189DFF7C53389D6F816C645C7184FD76AFA82653B9313056DB64CCBE9112D7D4
E8E9DF9A6B313F4265B890CB00663EAA58E5F20E3AA96783E8137EF8BB2D3A76
853C13F17F1FC4CC29006DA0481399E1175E6780C7B2C82C06C93A981FC51965
D8C7E9A91E207584A56532E42A660EF0B25857F93DECD2ADA7F411EBC3774964
648A4128DDE2781670EC0C47628ADA08ACF9D9E70A400D55D7198AFCC160F883
DCA9DDAFD1495B36B6F3D87B2578567E01F8CED777ED496D921CD5F40F20EBB9
034DE30EF389AAD36149CF5E29C24E9EB6B38A8BC4018836F196A02653F04C8C
8334AC44764C5EAC6C09A7B76FA562546C4D3B4B2445EDD1212F2140AACFF425
0B287FBD2DBE346D7A85A4B44786C9EE80949BE20981F4367E4BEDF8DA63508B
F455088F4E151B6A6036B68BC6F55573AFFC43811DD97AEB75FA0ECC52F8EF40
BAF989CCAFC054E99D2B5083F405E21652EEB80DC22255A7689A824B564BC9BC
0C250DB1E6043E69C471372F68E0A6FB74FE1D66640CD961FF677CCE7B3B0128
1D181D6EC1028274DD085C94BE283E09C204280C795ADC6E012CA96C8CC08E22
7E9B29367129ADA6AEA938D6D46B8740A83A9D2086D7747A7EFA76F246022ED5
6930EFA84BF941358ED395BE836902ED1C5B5B24B9C4ECAA6AC17AE75C90A3AF
6F99DB5E1A4CB1BF6ADC9FEEEEFF2A9E2039DBC6D3543B0ED4337FD7A234D521
5418E9ABECBF9A4C300E09C5E993DD200FC6DC5566C0E80D251662532A3617C5
AB633640DE4E47ACD8F3DB2786841EFA4CB73E79E39290FF79E5BD4A151FC3FF
CEEBA46DCD51DF86350B0932EECFDE5B4A5C6A7200F402C2650C90911A4EBD51
DAF1BE6E93482EC39711D329D1EE17450C277D5CA25406B334F3E3BE6177C3C4
DD5601933621A33B1B4FC4A198AB9252AE6263C8A68242F47F51DA8EE01A9F56
D5621670906E779A09F2EE7F6626FCCF8A6320183188E3CDA3E44433EE14D03F
32D57693E52F07EE548A41061B4918C364FBBEE3EFF311DEAA38ED4E45E89147
EC72BC8D310EF915D131A21137E0D97A1635F1C3F9E3CCA2B6C484CF83D80245
D582B71E59755F56FAEFE34432008D0E62F6FA4E0CAE541750F0AFFAB3D37C44
C5D73777BDCB03075A93699EE7FCA0A2773FBA385EDEBDD87A3BAAAE8BCD10A3
ADCE68AA9F6B373A2D4BF7AE05E7B640E3BB7845B3AE3E3E47F913F6FB46E51E
27CD13E6C1452DF7EBC6A1A6AA193FA80200A3FEE04B9708BAD893B9B516C56F
5DD6158C567896D9E42CFCB7D05F83ACFD2D2BA441745D302C6D5C5A1638A7D9
D15F811D6F51B66F388C60BB7501578864380940F189353666E555045F07D324
551C823EC06B06A4D3EB70D24E2D1212D3AA39D55FE7BC305CBB6C9B8C68AB0F
84C73E88431CCEAE158BEE36BDDE4595495A365FF2DCB590ADE78DC9C36413E9
3210089A3EF0798AC392E6D8382AC92DBFA75BA39CED05D7C24655792837531B
B1D13114B7EC05FE983389CAE85619FB1F79F97AD2CBB8F42C240A6613D69501
DE26EAFDF3CF7136B91B6D6BFEC9EB17BC4AB85B5E6DD047F410CD1709FFF927
C17D776184B31F98A00091544411B361F5409FFF2722CFC88575D8036D17E72D
3FA9DD2F2C7B0AC5628CBC69051F1FDC47D8CBD542ECD78D65945D6C9204C33E
7EF363B6D038DE03EC0DBD088A25BBFE9A06F736C59D43F8322382661D18E262
F0F8D75A3525425703711859180FF8FA78AA429BA75354AC14224F88ED1753B1
70EC9279882BE0F1DD3123DA8E0693EE9F819D5CA8F3E69215C063B300164E60
5F91189EE199D2AB3E434CBD4F81AE77D3A31CA0CE3EE40854A50E1AF54D371C
B36DD585C7D2190EBCB099509EA98C1AC9FB6976DD4CD21F7303E549BC5FA074
8A880E7E73B26B903FEFCE59A66B832DBB156CE7CC0AFC743B94DB8D4C9121E7
C45A95688575A4D234CF67B84FB7E5AFDAE02D59547B78F8639DEB5980968A39
D274B41AFEF68080D72E8B589EF0FCE31884BDBEE008B12CBC0A47E19585ECC1
C111F01E45B9500156ABB6A226AABC4805782137C8680706A1D96D55CDA0F0E0
1069CFC0D5E3779048994FE4427626F72455CBD6D17372AEA2CC5B79C6B37E0F
BBEFE5A33FA6CFE418CB68F06B13780BBDA0C6B39423608ED1C34F4E9DAB900C
7AC93A21C451BB91CEEF39E668FEA537C272EDE22D3FB5A344550A1D33ACDB55
A575C9E2A980B4996FD14B9233545913260238D3F0660E06BB1F0D0D46C1F22C
BE051B38051126FB23FDF273D79226DCFD18B3D3F12B792F3DBEA64B15C81B77
0E629BF3F1D44AFD09484EA427022EC74EFE56C84CED403D018D1A17FAB5AF26
35D8824A191DD2717FC7086EA140962D7A866F7D92DECE9448C663CFC73E6955
3E8F2A8D93BD7BFEFFD566D60BBBCC130BDEB38AB1E47F585B2FFCC753914D3D
99C1F61A135CB4544AABC8C7E4C0D40394DBD64A5154DB80E680FFDBEE5294E6
D86AE50721AA649F3C9FA61756864F2DB017CBD5E0231470823C930ACC4CBA3D
FCE4621F6C7406038CF7183CF91115D2CAA66DC000EC2336ADC4665662F8F585
2D87A18268611A869E2CA0CEA3C0BE972F258B037D20034255EC60B0AB6BCAE9
F19DCDFC2F1E54165ACFE9ACC602A23A656613EE7EDD4F4EC90C2EBDC6CA9381
0999ED71CFF93F91BB6CACEA233ABBE405D9F2AA5E21A3C92B9CB235F0FF9F0F
04339D8D9469830773269E2ADBAF2E7C4EECEF98B9B34A1B552E85F4B806F1D7
D59613D80A4311CEF303ADCF4CFA73753D45F82D51A824885B320CC7A11B8826
69167C178A398E66C52FBD7A05B9068F0F22180DD69364245E3D2BD92B63D0D2
2EE5889C5949C54F1CC89910306F4239DEE7923E13D0EA72C7F1C770A6AC5CA9
B0544A9BFD60F047002F9ECEC8219487E3D0EB71F60AB54FD73779716721B585
15B53C7BA31469A7F137768519C90CAFE9D278CF8B3E470ABEB3B0A171B37EC9
31CC8687F44910B5FE5C691A914621C85ABCD507641CA5AD0F56F5B42B8F8F71
04A93CCA2F6232C083097096B68BA5C66E0AD40F5BB30DE6E4C0436C03A78B90
18133DF76F50834E2254E5513503590CE59CFD8908401105F4C516EC88206577
CBCC9DC82F370F3620565BF16F847237B41431F4E8DF8E7A1D1CF8D75C0A8E4A
120E7B9278BEA90EC677E57FAAF3CE71D29E187486D0731D85E52FFB01DEC09B
3DDC09ABB298F9CA39A0E2FC8121E12BABE39600C3A762BED4DF805FB95AC5AD
077431521A1B86A8DFCF69E038399B8AD227750BFDB2ADDEBFEBAC62B25455BE
95466D9FAF76A5CC23B4025B844881E3755AB07999ABAADD19944B13EDE5D69B
0F2E46688EE4409CC8F46B96A309EFC598EFE5EE344A325F4EE0F9834A31114F
6BB6EB3FD6E58E41546A8D65B09ECFBB562F5A084C141785FF816AE9FA0FDE84
D3BC827B129B562F0D7EAEAAFA79089EB3BD1C343BF41724258122C321560177
EB3467DB94D7E58D8D4A8C5C6FE5D380C281A58594D64E038E49EC32F157DE89
2A96E71784C7188F05E2C98771541B85BF8E918CE5AFBBFFEBBFFA250B30E0FE
0B12BE76CA92CF5476A71ABD748F83B4DFA475687F5C79A3EB251FBA0B3B9350
B39BAFC04A15BD8AC1CC0235D91C2178B981CE9C5BF4F43C61F1FE2D62DAF84D
F5B722E940076C7A61046763CC0E69F8FCF3FA19C12C91E3DA5C684E29078C58
060A221B3C89C21B0ABACFDF4B2CC3782DA74F121E5E81A9196061FD72EB3A10
E3FEA45446C97FBFEB8AFF948DBCD1C0E7789B8708B03E9582D5E3552A086DCF
93BC0A9A7279F1B076F85FAE065944DF6074085AA04B8991894D406E18F76400
0AD43F8DA514628728FF7F78B4395EB3E8CB5C41516463129CAF6FB933226717
6CB9E77D32B87C55CDF1094420BD836C1CD75F4DA80FDD45EEF6FD1FEAF477C1
BEF94CBE992E3DA212DA31C7AAEB282CDC660BF5E6AF4BA5355EDFBD467D8401
6E6574CE6C2C13CBBB352C2167638A6BC470CF0A5962812B602DF1DB70791205
2CCE3A1C7B24DA906E5CFB9C84EB66D41BCEDE522078B2E07901C51DF9547CF1
FD834949E02D6FE154EF1BE3E30E9F24DB5CDF2EF8D49B540D9459BC3AD2D6C2
2A906FD1D91EF54FFA53CA9C68382EA2066C8E63BE45EFC83541C18E45FA34AE
13F0E6E757FA710BD8044057D3FD9EF5A2C37D32F747AA7391FF30E4C93DEFD6
6FE54BEDB763E1E705212F00E56000C314B5AA5019F0D15B13A7BAFB2B611B22
06CDC694C0AFE77A691417B13A898507DEB051167ADBDA8E517DEAB086B837AE
BE846AF3B5E1A1F1D9317CED0618A5CB6622C18A8CE6908A87A68FCCFE946366
1B2E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 14 /ffi put
dup 34 /quotedblright put
dup 37 /percent put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 92 /quotedblleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F43F9A1290E91C463895BD12E8A831DAD661EF23CB9AD2C26CFB26
71B72D15270CD8CB1D59CA2D9DEE4B63A8FD2929735CBAADF336DB2088C0BAD9
B79DA00F002B98E0B4790F729DB337A63C1BF138947E9552402C37257019A2AE
6961E7DE6E5472914BBA36D0E9F53FA5771D2801267609C8B8B12A11E0AB6031
E251D1F7D5055B426B1CEEB8B386F92A8661CE6E429DE0B3A612D6CDE03DDBE2
AE36B73CE97C83E306D223CE7774FA5AF973D985C5120978E1A02EC362C66754
4098AE47E5F9E0807326E42BF2869A9A97398E0C20F5F017CA9DB7BAB3BAB101
169D9B8A4E33ED8CE8EC3AD987CE15528ADEA1C2830CE749F731509FB6B90869
5967DE2A007A5F489E6735A959D465B74109BA1843085C27C269C751AB2FECDC
406C8C00B476F321DFBDC8D8B289265FD8D01FF1F9B77F9884F052D1DB422D24
5201FBD6463F31D0EE5A68F59D4494A93081D9ED308EE443A16710B76C554F62
59A79694ECBBA5B5F7952A3CC40AE422B2606781181EAD3F021010D5084041EE
B3FB09643D346C85D389DBCCBBE4CDB021849C266CB622F9F7DD740A0E8A1AAA
EF6F9D84C4DDF9DA7EB126A88A279B73A092B2BC0D040AFA86C896C041E5AF5A
D6D232C6677E121355B5A7E7B5433AEA862AF354FC6CEB056DA1425749E465FA
ADFA4BF068E3E0C7A4FDB5449510E479C819F9EA7DBCDC01BBD0A7015EDB619B
47145E81645C7F3E359DE5E3A395CB9A059B09D77B795FAA9C18CE2B4A63EA9D
1AE83C05FB21D23F4E1E62FDB51A7CF5F297CDEE3E504E9C26883188517EB028
9A7C5D5BBE2C9895D2B4E07A605AA87699306A5FA93740C8CC072B11B00877BF
A8CFE55830A76C6B244AB97E09553431987DC3452ED13A0F0A9F2502EEC5F332
25C63B0A8D380D92E1739E47154248F504844285752BD61638D0840F5681ADCA
AA406B95805C93B887B241A3EBC449FC90B9010FE991C2297D5B212A3173EDA3
B859614A538920A98C5689E21B85FBB6E0969FDC07E4B5AF20419E497581A066
4AA9254FE680E5344B940BE7E82CDDA8146103B7D0948200F14E79465DA220D1
2A524CE6965B48ADCA04E3157F849BD10612A89E2410E23903FB49A427A58702
34E31602BD0464BAE04C03245AB59FA347130CFB60BD8D0A3CD276DC4FAACAD5
A175527FF5E161BAD8DE2B1AD0B373676E179C17D43CBC143149B9794B309C68
B2089EE0BEFFD42D850BD31A8B4821B1861B96881C95C05D8654AF564B3D8FD1
B047D0FA9AE4C499AD2934F11C743550AA16B2AC817A3236637BE0751CEB8AC6
5DF6664F30D672BC542ADD1EEAA548A3705D2AEDBF835F21DC12BA218784FC06
DB49F324E6C818F612F8CADFCAE45EC71B06B5AB83E0BB776DE6B12D95A313D8
E1ED6F82BB418528E994164670DC120969CAAF54CD2177C354B14C93B75421C5
19AB91E4D878AC8B40E16F60ED4AD93BC9534EA1B7EB6FC0255FDCCE0B208FA9
35D2D8A396768284C04634A69D56270FBBCD33071471AC139C90CE7F8D0A47D7
4F177EA0EBC1EADF96CDA6EE4C537037635059DD9894C7BFBB36E142D94194E5
FC2564ACD7935C7683E0C284F01CD52E27B685371C875A6FE35B2A7ECA6C8113
D4897269186E9B9BDB108FEC59B29B5F904035D0DD47D2DA6BFB8C3A26B0597D
E188E178BDE83BE8C804239B270E21A834FE447CEA6BBAD9AFD3AFF33EFC8F8F
10ABC90622E5C66268061DE9EA047E5E664E25A472799EBF4C9FC600A947B8B3
5FF02E5AF8CEBFBE4C760BA404F5F855CE3BDC0257ADF5A59ABE5A9ACBEE6B16
CBF7E8B1BED93EF27BACB95E7BE0F455DED88A5FA97283E527CC7EE9F68FF49A
8C261255D68E11567ED38212B4F8DB9B7105A4BD642DFAD8B965AC49F3F7D03C
4E69949584ECBFAD469CFC0E9E9A6D795E8E3F2C384E8EBFE13BAA70CB3DC74D
88D63CC326CB5F5318FF8A22922639E5077C139E3A836FAF068A9D8FA5C5C34B
3145701FE538A01FC2334874336231E9136F61962383C65150264A443188423A
4BAE8BD94DC0BFDA6BA58119FCA2570964C90546AD2CE792F5C883A8D0A79774
CF420783677F886640565AD7808EFA961ACF185DC1E322EE3406C35EF728985A
C85C1B43EB9623DB369D2E0217DE72D65B0B051CDB2EE8ADDF86B859B45AC321
9B05744F5869539F95E7DD511444C70F7476C183F334761B274F2DCFB33D7C6D
034EB82D55F0C49CE65D4F256B5603166A08F623639FD3511FD8D2B87DC3AE14
1013647112E7611704A96444DEACAEB366E373F29B0E8EA66ED0530561B9D6E2
F4BD6A1A643C4875D056EC205D4DEDAB66E8AF5859BDB0E2851C158D45F5E846
99D183F1405590C7BFBB36E142D9411A5C81970EFF04D9E8124A1FC71F19B22D
DC3E66D0159BE7CE94CE2D35B51730CB8CC9D32A510B2EAE92197EEBAB5246C9
580309CAA7F24B27E77353A56C49760CA8E87B6D2EE9902A6BCAC042ABB8CAE3
72D82C5681FC63B3FA6EFFF40361EC44D6500FF73F1E8B82D1CABE5271BAE818
43D9DD242EEDB955A9E3CD8740685EBE2A16804A4997AD75643E2674EC7AEE10
C1DB69D53BB4907835A6F0A6E0F662104C8DA9A3827FA27A1D4F89C3686AA1CE
87DD46D196D555BCE6FA7A861B3C0F0942AB9B41FEFDB90E10C8AB3665345BBE
9B08932B33CC7F6AFA9980968C331FF5B5C01A0F70F1AF38EE2C27F6240BFF59
5E24EB42EC5E29572AE49002D43E0B7711F03775BF40F1998FBACACFBBB36F3E
F57FB37E88EDFA25F24D7DAFFB9AE8DF96D353F451D9A58911B61A055AF9ACF4
F7734C811E16880D3514E1A0B717368F9CF2EC37C76CCE6C378E8C16EACC72BB
A8B590FDB4670209BF8D059F07A382A3475BCAADDEB2432FC8030A328072A35E
527E64B9FA87B640AC9E69A18E63D897C6A1738199C7CCDE7F66AF63B076ECB3
C414A0EB512E55BCC61B14C231ECBC83490C56BF77891530D8D3938E4C52B965
FE7E83F2415242A3116BE61DF82B5E597B9C237C83CC516574579DCE45F43E21
EFC3F3A766F1CFBBD9D8534FF93FF6D3E7CA8DAA76B7EDD711F21B6DCFE6A3B9
DDF60CEA2E2B3A3B35663B7037B9C2159192B783C2A15ED64F6A9719189186CD
C274F36B8B11CD9EDD9422F77B27BEB4CFF6A880BCCF4EDE2FD1109241915C57
CDC1BCC32B6E391211F66576D66694E3DFCCDDBA4ED1A2665F461718BFF7F58A
21A524426909FA94CD69526522B4AFF4D46E8B548256098644456D6323286CEB
7755247C4267D48C3EDFADF0F7ABBE66DE37CE1097D3DCA7C6C5B704B276582C
F0DEDE513E0D6D14A39880F0C09709ACF226D0FE80E4E9750B216B0F9BED13D1
37DFE3F0190DA67DE772A14326A0A7D04F50DF4455103DB77CB73A9190301DA6
BD8712F2F6361D83E687DDA4FEE206A807C19851D98823ACC3171E48EA230E77
9703353465F8B0424283A088E9C11223FFEE89E84E2F5C77937234D156C3FEC8
9D364FC48E66DD432E1B371CC6E6C651681C8A27C1CB2D9B34A4AFF927895017
E685E888AE5D185BA7E72587BA72B78C760C135C880D6A11F2D202F1F959D5E0
D41E963C93AE5F9D15AE385254D0DAD0C889A3728565EBCD77C6647F6E8A1BCD
23DE641D63D1E15C339D8988EB92A5346018CAAADB5C80602AE930F5B99D7E81
B66D7474AC111838A2837E14FC0374121E940B83EC26AB7540D5A66676EF6AC4
F1205A77278C264D9DA32928E4D219559A5AFAF88776CBC70172E299B1F6353C
26630C2BFAAE70D7BCEEE8A108E5CE52019DA8C9A7838F84A09E2E2C6A64A057
7ABD2065EE9ADFF2CD822A0104C843ED2E214E138AA919CFF954587883B04500
AB271CC2ECB9BD45712DF4BF260982E742F31B97CA039C829DD5C3B6B1397248
517D0ED08850DE6284BF194079E528AAE56BE480C108669B3E358EB81420DE1D
91BA2124BEF9245451AFE225349BD993E5C50887F203F6A8730F04FC46187E01
7C0978D6798584C91ED51F41332ECD422011A39606C9F30DC5ECE75D485F1F73
DB5A415B02434555D99F2E26533A4E975A340EFDA6FF45D81E5DCCB9C26B9FF9
DE080E1A1C39046A34DCDBD026DDE24401FDF820A0988CF68EC61C5A00B01AF9
59AD5C1BC2018707491BC13DE3F5A68218BD42279DF4860951277F517ECCCB91
CDD1A857949EE410BA7DCF000BA5716D4738C2D124A192447C159A816DE29ED8
95778C157B04E0FA40160E32FCF39F99A689975A2369A016878ED1B0C596F309
B964EB2E18CB4C1FA489E5CCC5241D2B0861A115996462F041F643C956118C44
04BFA714CD4145B0DC87E4A39927BFEE6B97611851B71F926B4393A001788BF1
C92E4338F6961FD90AAD2269B5A702B14FAE93E17C66F8944CEB09E21E5CE296
88E218F8B600C6E280EB740571792549989A7FD7661D6B521F456E9157500079
92D8BA0B4BDFB4436D2D4F34B63553B3ADE3EE262734947D4ACF22EC57777248
3923F11391A4D5CB8F2A8A46AB878C867273E602F7C76D318703F5767346F893
1EBBFD8FEEC4E60F813CE059D9C596B85965C9175EDD1D417CB139C7796E5D24
DAFCFE393F991496AA3C92999D48C829D31CC0AB25F4E4C9D681181AA7A4E413
4BD23313548B1DF2EBEE1E09D4E10B9FF7C5AE5937EC7F21EFAFCE8C92900110
83CAE289D1BD6577CC7293289EC5F3FB15BC5D292516657B11080A15B6FEAD96
6D59FEA0253535C86800001D0A76C08534A95FE764579DE0CC5333EE129E92A7
DF9313DC12E0FEBCCBC777AF70837230B39D7DB4967C2F48E30E6044680B2E16
CF385EF28C59D8612157D08AD6D05DBC6CBE7B02874E3A7B4AFF65B217A666A9
60F81A75AF0F945A2563ED59725C8A6F9FABF128FE25117326FD98BA39517C22
EFB67CCE79CA283F603B87F41D6CEFE69EE48451C33391144EF380D2438DC255
CB89184E4E839620B275580070BC88E8F97B044838BE718F09B4D51E96EF23A3
85AF91A2224B3EBBA27C6DCBE4619AD225D794B618898A7BCE753C4E051EE819
EC8781ABAE54920AAAB950B726BD7B6B9EFD1B9C7CAD0F146EDB2762CFFA1086
EF60197EF68C09FC91C781624111B3F3C659CC0C33656A47FE404F1B92A24343
C91EE753D4E8D367B98DBE8388E42BFE1390D9868C19173445EAE6DD370C8DF8
7128DB4DDDFB070498941C3A84053F0BEE131AADA7DC4F2DD3265871085667DE
C92AE590242D6DABBEC27AEF7CC3DB9021B909C87A2F65382B2A4462D3AD8CDA
B46B70CAF0ED5A508EB6BDFE3AE67C013E65919ED6269484945EB5DF4A94638B
0BFD80C403CD95EEA30A00576684E2C65FA7E9B51EC68F3BFB7B3A26111AA25D
25D95A9248DC99ADB05B2C4ABBC4C5436948D1FA3B94B09314BB3F4A6D224C7A
45BC91E60F8C8AC7E9AD5433E803A9E07129D9888632F0343CA2B2C66926A1E2
0FA115FE313FA135EE236DAAC7D2D11CCC33886CA982EF14ECF3981E30A8BC2C
BB448573B12C3099F37F0E62FE4BBC8E13352A16E143C7AA7A4D850FD74EB3C5
C1667A8EF064ED64D00B4F93B75EB927E332C308C6EEEF8314851583B96DE184
197BE43F13F250360C66B33541A9CB75BBE50C4562EEE7F637D60DE923BE16A0
6CBF6B7526BF6D9967155386950FAB2E615D6E941E566F755880A23DEF88229A
22AEF457D4542B0FDCA3EF6BD6ECEE8FE862D47290A2E78E6DCD5D05E7F0CA9D
D98B6C3413A102B9AE95492F44DB15AB52808785C68F85A1010EF12C187F0EFC
B13E3159556112DA540EE73B7249B646311B96C0ED035C551AB599C3EA4AF6FC
1EC18D32DC5AE8D5294689DE4D8210CB6211BCCF1A19157DF1B32273EA957BFF
00024B408763936DA946494588F561396030D150F98094B9C69B3961DAC46C2B
C585567145302CCBE3C624523EF262A23999339BE6A1AD7EE46FB2C6974C873C
F540D5FD22EC76E1F2A3BDE45CD11FDDDE655013C79490F1E44800CD5418BD39
665F90F2BBED980CF5FDA3F4825668F2623EC70E911DD0E0BFE9E3EFBD1941DF
CA3EECB9E29D96A2543B052F7DE22121456848836AACE50719193136A9883368
BF30F456FB171C8010A365E5A2261C70C11B2AB32F1463CBAB8E44DEAFC54F20
243149CA6C9F83A21DE1374AE0F1C612849A29FB3ACEC89B37AD118C9A97C531
A61F1EBAED82CD91465BB1998F6AE64A17BC14B039075D2647D170033C226A93
F7D12A19F9FBD3B387B247AA598006A8C9589E59E0D0CA683B6FA1537338939E
E62709AAA458887870E045D9ED43B2CB4C32EF3330FB49054E379ECECC796FC2
BBA397D830D946B3F83100227718808C0A0D169CA805B41F20AD72C939C118B0
D13155E075A774ABAAD78A0E9C4C4CE0FD02BDAD91804A740DAAA9DC6FB1A2B3
84A9479FA39246C6647D8A5F333AA87B7C30BB33E1DFAC3CCD08574DD6B86032
A969DD0DF69282A488A24E80F59228BEE0FCF86C2348BC8FB05E1254833E12C0
91F70FE7CE11911A58A49B8800347A18A43EDEFC6BF6FBED1E0C4556AB3F9521
9FBD314B7DE3C1282468ACA91830F80984E92A873E3D75416C0AEF2F3D2F71CB
0B2C6B3EDB9CD25A3D51C7277CD889EE8403937DA71597DAE98BBD70D3722BE7
866278BD76C23266CDF8345170EEC21F86A0C0E654ACA71405D77A8B45ACAD2D
663048566D00772668578DB70B6E68499E6F41E0452EA27BAFF34B6EB0C3AADE
7304DF5859E6D565F0DAF6B51F87DBD182DD25C35738D7938D3DEB35D08E2EAF
AB36D7F147B986B016BEDA128829E52C0CC89956C5EDCF972CB58AD4FFB1AECC
FF355F6C5F5E66C06E5E364762CC40D14FF216EE73D9057421312E57B9DC9028
9237F67C394320BBF3C0CD8AB6CFECB9E3ABEC2F866096360786883FD0B630A0
1A154CA5F4B248B253A8E9892502FCCB79232DA0360D8F054D4E5B3692276D84
350D411BD0DC25BD8EA60620C0F77E4D33138DF1AF1F154BED002D331EFD4B59
5D4B9BB7268B903FF39D7DA8F7FF3E42178433485BCEC44DBF0303349196D17F
630FCC1C50FA161A6AA6576C96C0203DC327313C730A0A4FE2FF8E74C8D79071
5675C7DB5101EC1C7F2C774E5DDA981F73AE3ABDD80706727CF0F52E860C08D4
7804604A93D3C086E97D4813A0CA25590080752A709D14C42012D0817E704FC6
911AD90E52C61052A267EC9A1C0F1D33976EE414727932DE1845F33BDB505B8B
66C6842DCF84CA80678E8F82459AAEE0A157C20D98E617C33994401A905510CE
36A7BEDB3B9CA2B3F2D3C06B36CDA52988F01273B6BBD5B4A6833BACE8D08A0A
A851D846C5DF85A4DC97F1E7C84BA06F621C7170CC17EDC795D56F0DEA98CAFC
7491019DEE99B405DEE5B74E2365282F1239EB0A76FBDA67C301EAD13B0A6E5E
92037BAFDDC2D8B324CE120A427514533A8BC174967990C8A5179210E70C5197
EC3D74D45FF8A5B38B5B53B6DEFF49706763D450DDEF563512CED1D376A6F1AB
ACA0DAAC88BB4FD752887E7AE04030AB208C3227DD91716B33B0EB056A7DCC40
7691C5A3D221AC2C102E937E1241E975BA40E8F60936C13F517E64B9A7779DD2
AF39AA1445BCB4FCCAB1B11B5529B803CB99AF32CC7DDC7DE044738DA6F1058E
92956C6DFD1F5B12F5B5750247EF7F0C11998912659539F94BA285D97747DE2E
311C81975E3471698D749CCC6F3E915EE79E8E9F4F30FD24E855F513E890411F
08F5C18AC959E3646D851D5D607A75E140B12697032C7301038D941CBF811E97
ADF16DE87CC4875E249580B7717BC5498A283A51381FA5030E9543A982308B31
CFDB6BA7F5FB6CDBFD7128BE087D900956D8F107061C1A9BED1444BB57741833
7A8C337396E26EF9364E5B3F7DA1BC260DDF97EB9A87212ABCD4654D0A53FF54
897A7555FC9C0EEAEE2AC3EAD3690DBE4F94D8A6CF2A93C1A4888B360B006590
63503E18279272B7500F264F529F6544F5879BCEF7700E2E3C420A4FCBEE0926
21A91E86B0F7FF92B2586F140DEFA3B9F1F8E3160AF17FFCF4B6CC7B6F3C4813
6B80B97A044F2CF5B31FDFBC713A889D0EAD36930AAC897B960B3447326AA119
D691E9160D752D08AA0B750BA9BEA9D0AA5F3C83B4D4FDC93DD5BBEAAE23B336
789E70E002B9065443ADCF7EBCC60A5F8664FE07FE5611612433ACF6F4D11692
ED60ACC1E9702A66F7D46BEC1E23987139C20E3E766E02D245843E097FD1752D
F6AF33E5A65E47E710C65A361FC9657576DA113C5DDB6B6122DA03E765C6D401
98CEEE92CA1082D3B913FA3C84E29B9BACFBA0B18D62FEA1EB4F739FB7347C71
1FA818B5937CE2147A0541AC7FF707E3BC094275C608E5A95C773FBE89BCE2DF
FD15F00256E1BF6A3137DF5241D942028C916861B93A7172AF53BB67CBDEFECC
03C60D8762E4A5F38BB6A4059AD6A7F58551D72F4FFAF32D0376B41C806A9E63
1D3A650CC0773D5BAED873FDA627815E9AF9906B5FD4EC1FAA4C3BC765F3D342
0DE9D65D4C17EF79DAAA734832EB9F59CA105120674E06F5D3D02E6D4F1CD1D6
6C3B9CCF07FEA564AFF1AFE865DD003844EE8DD3634A42C336BC0EEA9AF40E72
DD60F55CBE74A2069BF0CEA76E5B7EB6F78FD0DDD9E277791FAB3A420215CA9B
40B4EEF107DB3D12A1816187A47D40AF32D7FFBA0AC17ABD33547CD912A8C0BC
0E9F34184881E3388807FDF7736EF37C53B1ABC703B9094366B146CD8E73F5BC
E3D81E2CC47772A485593D8EF94BB92558D95C6E8F8B4F8170796CDB054824B5
71C9772F656301DF4D04F85ADE8BE0899A5FF5359DBF57F7D5847B1779360D01
76271A8E3A09F8303DE88F8CCADA235AE0CB29C54C8B28F58E44087984A78BD4
2A405D4E17FDC5EF479034570C951F9EA6441A48D53C9934A2EE9933EA4ACE72
6C31F19B94B7F8C9AD8EFB6BE8E13C28C573FDA575F9B5DB5F861D7C41FDECCC
33CC1B7A2C57710E22F1F98824AF3B656EE11D5CDF61217808759D22DB74ADE4
465AFDD7F42EAFF7EEC5EFF89025CF9FD7CCCAE4BD4DFD051C731AD8F2D81B8A
773B0EBB8D19365E2165BF7D06228CFAB2BD3A96CF53006F0AC7CDA4EDA975B9
35510437A1180695E8D8F37F0AC53E4F2F735FD04EC5AFA266E9F5F608BD0A7C
2000B1AA325B6D61624298CF91A25FF02E328B70320DE35C5DF4FF12CE123A95
B70A018D5C5C95F8BE4EDBC670A9542884E3872D72B9E6ADB9BFE001614BB3AF
E6A5FD9D96D4E8EF6324CD821114C5C57E118A9477B9D3226633B5DCA8D6A9DF
E7A5878930095A87A4369C00C01806B9EC916C30E60CFB1748F60E8E2CBB090B
6E57D39CC83EC49FF675213668BBEE5F010EF133AE6B62F3D3C037A46EBBBF16
3AA38F9F1F7F25BAD77BD23CBEF771A594437E6EA27F10D2A2DC2AF28ABACF40
2658A668C28E2D1A7B8A16172ACBFEA24F7E6131902A4EF62CB99BE565B155B8
E892F82AD1D42395553C342DF123D7F58A96AF3E4B0E26932B1AC20ECAE552E9
EF657C50159BC5092487283C235D0E51C77B89C39AEFB8284C4BD491ECACA9EC
6E2DA0D74D20D7CF20E940E8044CE25B5B9CBBDA7B21FC51BD7EFB00A91D188F
88A1E97454834C0288CE5718E09873C54210F0E62E9215769C83BEDAB386C9B1
D5DBCFC946AC32CB20A7B5E013DF8AEE3947EA101464AD6B668D8CFE34B240B7
EC504CF7015C2F293FBE74799B6BD986A2913EF3C9D0EF21F16D0BF92413A385
CB8A957579E76D014B0A139E6E8199ED0E20B6ED7DC7495E2A85157BF1E04273
3F2CE3FF7A870FDC01495D7C1E54C97D479D803BD76D189D18343C52F1EAF4D9
B24B9316B13CBB815619A1234E0E148C4CDFBB6AC0CD2CA680F24A2BBC53FCBD
B6B7DD339059D69203E444AA83FB64B7E81E5CC9042752CB676656218453F155
D167EEFC54C58208A623999289E4487A4C9A7453607B55B5119E5ED84E965711
3F0982FF7860C14FF4072B88EE7003E4C0196CA13F6B38E1AE75D7EB24BCBF5D
FD50C1D6F67FB9126E4643FB15DC58E05346313C49DC926AF2DA65CF2452F89C
771DD724AA0EA1D75E4787B8890E4CD672543A13A0AA801D39BE6B35DCC32BEA
8B6E740B8B7CAE306BF79B5B6F90BDA09A3A018A5A449705A01D70D2DD87DD32
4E940E98BB2617EB2A9649C5573CC1AFA4CE2BA9AF11D3C29DECDBCD4E3BEA28
76428930F20989799D9D24281E6C8A4132FE18CA0336544A0C4F556AA9CD4A8C
09EB0BAA9B12FD7C8FD78FAF0711C30C0F9ECA3FC26AB59A5000BA943B15856D
E845B92F69F15600CA3F9D0964EEEF2F64C3B7DA7E06164EC5CCB20E494F204A
97A10150AB0C14A258793B4B5D4DAFC5012910D8C8B0205864321FDEFCFD8A09
E64B5790DAC25E46EF2B2DDE6CF1342DD1E3A25D4C56D02CC030BE488187D929
752A79E292A456DA9B0E6D5005450D56730183F4673EFB8C0B99097BD24103B0
D9EA690CB5E02F7E17B1A1063A83ADA737DBA7A576ED11B992046C86F6988837
02D556FD770EB065F96F75FEC8658A4FA27FCFA81A5E2A4B1B4B7D567C5A736B
5641CF478E1AA7D5A28E989BD0220D56CEB987ED8F2AE28B06A59EB09D19DA99
8F8268DFB38B85B5BA97376A5394F71580324B6B0AD50F00B4729BED2B934C7F
F085302EFDC99A3137B23603717A9DCD910F6F9BD8E1CD16BE8437B3C1A995FE
5D15723431E3C9E0178E07E267F1665BEF81DA2CD1A85BFCFDB2684DA1912DCA
24F1AE5CFF895DCD134D5834C593C2A7F1FBB325ABC93CAE5222234D36A697E5
0F2B540559882092890890CDEB4D14ED75EAD544E5AE1E26900D797242E515EF
4D0C665FA1F313BA62DBFA9580A401E08308E5F422A47C263F93CD6DA35B8D7F
1AA26DF1FD18C8111D4152150E98933E0577ACCD5C4EB053964455FB4DBFDA3D
8189615823AFB93D2BDA4A66BB641D4E27F8D5108A61C142C2A220C42F53F463
E97D6D9B3039772254A7C09F7208E1F8CC2F77747F00C2020E069A604DAA284D
9BCC3027FB5FDF37FECAA7B063F79A9ED6856CDB4253A286F4BEFBBFA6336771
22DC2E187075D715C79D207FE6D3AF44E278A1F1289B5FA0A82517A927C9710F
0A4023371CA93A6BC49820713D0E97717853390E9D59C4B4A415189A19A400D2
054538F03566BA63DE8890E53BE33166FD443C09CBD606FC916B5C053B5EBF59
68295761EEA6B14D2E06FA2D8198D77867D61CBCBC0684FBB62D2C52EC6EA234
76940D65CBF3969333CB1923C331152BDA977F2CE1661B20A75CFC8B4371DC9F
EA408BCBAC45A57F34727E5BB7C52AA6C58EF873C5B4B782F807C5B536E2255D
DAD8714B861B6EC9629C7097237E7ED098A841CB8C3FC752CA9066779A668223
6D2C531AB1D176108D166C2A06FA3C880718F6BF7EB35E8E13F80D1FFBD16FC1
481087701B4B2AD09379B607584C9CDF4139B8FDF9A85033C7B7D809DBD689BB
7F9DCA4F4A22E63725C9F65E4CDD4CEE0A10FB5A51B7433E726D92FC26A17815
009735C64DF904DF3A8CA3D1C9D1556C0E21D97F0D7BF21D6904CE57AFB7B4E7
DE485C61B84769846952D1A248F58F0DF9A8DF1BE5296B36F5D7DFC18352B758
64CA1EF62DC0C86CF5B10A0D1DE8C284381B4F69320FC8D6349BA8ACB4BB72E5
F9A990DCD04F2DAB409482A4940443F5C090F018EBC64FEDC450621AB4179F47
B6DACE2E0A0EE0399FAC2D5AD2D03589750BE5BD6543BE157B460A545A8164F3
B794BDCA750A6E9537B2FFC528EC5F394A073907A44330228260003CA70061BA
C84FA88682E062B696B7FC04161233E8558EC045351AE4747C573D70DC308FE7
09F31FC5A12F21E65D681D34A6C445434316319CF0E20BB401B436C0086B9A79
6B48EE14C462636DFDA1A7276365DD650C0BC8B09B148E068B2FEA7CC02928EE
89FE21BD549AB9A23E7CB11142E4C2B40046060E89A04EF96953D18AD1C25733
AFA6028A24DA200B18455DB4E827F7D459CDE6AFE9D9CBED3A4BCBACF6BEF688
3C5E4CB9EA2D713743102B8F6CC6F484CD5823F500B103B60725F0F99746AB66
8D8EEDBC9E65E24A38D27988FDA3E74B8D8DF3E7B4092730D327D405E2F4D2F4
C97AB956F2AE1240B81030D030524BA27435D94A7486C0F688C5A4FF7069507E
5A1D4403A6805871A3D1AAA1D5821C55502ED83AD915707335D0CC1E866E8A84
3014DAB935FBE94107BC85B5543531FE8C3C86A47083B9B13E44959F091B58BA
F376703B740B68A0162FCA86266F37BB586478D1D8E789899FC07FD3F2670E82
48A822E255B3D49DF649F5B08CC47BD9B7A268F55CD5E5169E842C5C87944FC7
B50AA0C7D0D73E21B5FFBED243FFCEADC787DB275496C50E4A2727AACB9C8FBA
895B6CF1C8ACEE6E4E6F06165048CE84F041732AE758BD81337EDBAD3B092A30
F1A54860FF96EC2DD03501B65659D812F67FBA42FD5E1A58CB9EB47D083BD61F
89095EB0801AF467F95DEADB134CD911530CDFA570A95924CB2F15CFC97CB7E5
5C938E4D0B5042E59729D5F2241725759BFEA710794EF84BD4F2BC19E9711DF5
1D3503B65B87E56768CE4BD5EC8389B6C7766ED7674780BA12AA9F43E364A7B9
AC407D7D8B46B6483CB13E5F4E1322487428769535EEEEE62C4835EC56798123
89E6205AA4E48E4372919FF48E77B86A9653F25CDDA4B4613C5FDF5500622566
DF18AAFA29B2677CE50F11A8F9D43662096391A8736ADB713FCCD7375466FA02
72B6735B0C246251E40914D9C64EFC221F6405568A41F7DF336F56A8CF57F374
02E70D448868AD297D824B2EB3D607B0AFD2D1E8A10EFCCCD64B8E16CB0F6606
23F0422C1F45585DE3D818C250687EF5F21778D4B7CE53F81F4BACBDA1C5E11A
196191C6B11A908E841CCDF59F392C43018DC3C1953701F309A3ED45BE9DBA09
7D42C3D5C6C2D523DE7F3523A2D289674396A68A68CC90C6D2530BD160569F3A
EA7F7A1F7ECD5A545F1DBA0F028101287F7924C928FECB6BFAF557B6B05A4B73
F972851A2F0509678032CD8402BD985CAB49BBC108396796D263EE6C2F4DB4FF
281ABB9B6E680A0C17CB88A327C277A6A74876350DAD04BBA79582B19AB1022C
7ABF4D6DD5BEA5C8C8EF13D5CCD718AB95806154536FDDFF999E9A6972B684AC
2424BD9ADABE92525A1B0E539BA2AEB32BD236E9001F5BF111AA03BFEE846956
0DD51BD44AB9A1DA21257B0D1B8B8F4CB2C3F1F829C8A756A28192D233F4AE81
EA05F03509717CAF28D056CDDF84B5027019FCB674F0C4650A1D9EB5F15C9CAF
3AF3BF2E0B20D7FC3D7BF9EBD829A0AF3C6C9253BA6DF1343DF5DE25A5D4A234
6C72A2BC758EBCB1E13936431A62C41B67B73B7D85E8DBF4F243601F476864E6
E554C503E49F3FCD06FBC63C02D048AAE65DEB913DE60E06FA0AFAFBFFEB9BEE
5A06EB83734233C3B42A6F9BF2906A796EE3CAD51B80980BAFBF0EFFAF3812B1
190DE65F5D1CCD3A881D1B2CBD01BF886E7B60F070D0382630AC8CEF3E82B723
3285DD23B495BC3336E955BF390FF97057403B0841F1A23F463FC926C97B3495
30D22EAD15095C6C72C98E1F26B61461528870007CCA3A155CA4C48FDB59622F
392791874CA95992A3F3ED8B96FBCE56208C4E33247DF48E5290AF607E117BB4
B38DD94502476064C6F31CACCF23AE98EFF40C03B7D8916F7557FA55BC8E1B36
78ED802FC06A9E4221934465090D57115EEE66C2E51DC39B972C0D38F3161BF1
E2DD71526C796FDDE0399B87CBD86F578BE344F1923B0999BF297E5F3DF04070
2C299FA3F569F93CFB384244C4D3CAACD761B1FA579B56E374678383E2D0AAA3
2223CA07EB43736164AB714DD06EA95A5CC32F953B56DFD8089293F2547C5CDB
E8279BB2E651322273B1655E6A4117E534C9AD7B9CDFEB9A6A7920CD66FAB8F4
C24A82FF1BAA88178D0505B2020FFCBFDFD535D13375A72F7DD8AA4F3FB2CC6A
FFFB3C1A20A58F5A4047AF57D9E52354AF0B3410B03DA05415E5EFC4C5E2829F
53B17E52FF217107AD6C8BB2980E411A4F04267EFF030E08E857A9561A58EC21
CF7EEB782950B52A1321ABDA48566D480FE65D0641BE16393EDE9646B2D9C76A
1E9D7BE277D443A10A2F0CDB1AE0A627B83739272EC05F280370E195BB6279B6
7CF1A7689B95F32CC2A7BDA2FC7A9403306A3F91F35C59C98E52145A07E793A5
3BA047B1496819BD255690F2E92A269E473A23575563715E8E4338FC1FA0A600
235B0C16A356E43D08750EEEE48BA318CF14BA75AFAFE4B6B4254B8A4E2EA8AD
F25EBED700AF7D7CAA26F08EF7C27717A7EF7FE7DA725A9379DA2FF4B31DA279
66B1A383BCC2FD9041C2945202E5249AC1DBBD0B3986984AF25F8CA5EAD7BCB4
575380886B913A353542E6BE523FC236015237B6D872424FED51050C22CB4751
08020940B2D7F4B46D2756D40AC97B31CCFA591231B236FBF819CF01B044DBE3
FF118A9049F62114E664A45B677183003029DEC939A11FA24FCFE95A48E1FCFE
16A2E0B9D9E49406E10B82610E678C8098466FB524E0B841EA03CCEB7B316717
EE859DDA18A9FD26D59DE4C5D56947DE68A3D4F612D1F2753E8FD4852F03473F
41C9414C2F34D2078429647747DED05664F79E47C2A46A17ED4BCF5F680C5AC9
19C8616B3C556DE9B6211EB2A8AC899391024CF360141CD78C34D00E0414BFB9
0027010F9146AFCA8051D3EDCABD06A325AB6D0E2DB7A9939B29336471224211
E63BDFAE460530E06C7B54E7CC71CF5D6849E9993302D7398C34D7BBA45B7B2D
E92A99E231096DC83D1A9E4A22AF351BEFBBD242764AF64D2D43AA6C2E9A1559
BEFD52F99599829D188E286E203BD91532C6A741A14671E48FCD45FD9832CEB1
667BBFEFA163A8C0E1A6D31532BF24BA0F73859E3E2C01797D0D1487F819FF16
8820C899C755E3BCB87974A5CDD52994D1C86E153D774B9BC5F52A5EAEBE64B3
0857FB0E03F439684A476D669D7B90DC296AE23A6CB5FB1022FE93873ACBB421
17F0B18A559EE84CD9894BAB50C83C8F5FB127DEDF1988EC891576B2153A8290
FA62C90AD977AA1E5E1B62778CFA2824238D3CAD8A3B350ABBFC2D645D4C3B77
F7E175CB5B1A21632236F80938E2A77D50C3F40E846D90BA6BA1A3B2DF9D0C17
D2501441F37361D48156E9978782072283D8C9F7F1C7D94FA79AE70F90E08F6C
38E1BE39972D4D6CF840007034CD52C6F478BD44901BB38724F54E4DBC4BF44F
AB0A77DBFB2BC4876300F61323CBC2B8393E81702302D5C03AB09F22B3CC507B
CF3B571F78B5FEF18071688595668B8BE7A5F0863CC92B97F063EFC69A00C73A
977BB83C09B77DC6D0694F937C16F26255BEF9EF7AD4CC60F3F1A0E8B2BC36EB
F0A10C719157471EA31BD89C47A8EE0D85121C2DC9A515B5AC8A85A8A09829B6
CED86597275B69E12B721FCB9E6C495C04997810833653D2DBCEF88FBB7C55EC
56666B28A484827F7D0F75EC6646189566E632115840986447590EB2514ABE6A
5D9DCC852BE7BEF71F86F08C83C22057516059C6F77B124A2FD902C889481D65
1AAFAA16A9A95ECEDDC22D89F06096F4C53C929E89D284E7BCFDFCCA55A92E4E
45A0714474005905A9AB9A1CB220D8405DD71BA0D025969CFBD934121E997BBA
500B329F2E9C00D0E31F3A557C5E90CEF15D75468043E40C6159BBF240B4B733
F671396A8B0218A303466177DDC6F5FB73126C732D25D6D526A8BA7887152BA0
6D8945C7295927DBB2776E17D7212CB82285B74E549BC31327336E0A09DF6BF9
7BA2EC0D8068BE4F95C471681D8FAC76059026CBB1B280C8569EF51400F925A4
D39D7AE738272241E3CB27E08DB403A1BB4F1BF4999EBF06C6BEC4FE73A4D32A
9CA9BA55F46C1657C143B894E70942A07DD05B56B5CE3640C30A1B37E1630793
C3001E29F216DBB8A4EC1ECEB63EBCE4C79EB5534B5573ACDBE77B90776861F7
4C94A0F2BD02A9ACEF9C4AFD0D59B5C12340E69C709A479F2D7860E1C8C6EFDF
18DEC8B92809847B32998EC7EB89787BB3A56AD0148429BCCA6A56DF741B8FD9
E5789ED8D13B952F59CE01910A7D530892E82ED3B67F41E2434A75007942FA79
B4EA557F7585636D094C483A2359AA3162320D346534398A3B906FEF3734642B
FF5C864B0B05497D1A665D4B05926F5835057F5E45800C3DA5B1854941BA7B8C
168E1912AC10D9B04ECBAB6D4E3D23EAEECB0D75E41DA5813F3B26E15ED85E20
02DA4D2163C798A31D8BD259FF02817F243C237990823E9F73D00245A4AD0E07
D1350A87F98239212E7DD233B8AD72507B71112ED3D6986DE9435C2EEECD8E1D
B81AE1EEAA1F2A8792AD2AE7137AB675E03FC6D9A3140B17345FCB2B9A992DB5
B71488D4CEB59E193E2EAD4ECE1145D75BCB1E014A89C0A07A9DACA20A4CBDE5
AC337D5093558B45F3C8FEABEF80154AB9E63E9CE7CC2E5C74AA65717AD28226
16B12E4A9912A7121732245AB7DCD034612855216F0270329ADD3CDD66354037
A2D84F5250D44320EE583D546A5FDF5519C1E08D306787BBC599C5FAACD5BB8D
4F5F645B272ED5573E149AB412475580FD135FD7D982AA90F3E6133A902D4BA9
D4FBADCC7218E00A001BEFB2F9A36C010D77043D5AF3B8117DCF8D25EE00B5F5
F49D2E5F8CF5F620A9F10828C9E36BC3C0834F79D6D1762FF4CD1414CA2B62A5
9F75D3A4624C4115F0AE547115FE993DBF06D686382239E358984E08E6072690
866715D321F3983E84F880DFA7CD6138CD7EA92F3802D1B8015367C386328E00
A312CEEDA3498FE843189F730C4B00F28790E1D80A5F3AD6A38032A714B3244A
4F71E874570950B11AE16914F86B83CAE3215130863DC3B6522ED76A189DC81E
CD55E9C5F4C0D582736F2A58B9F8EBC95044C8445857551DA5AC7DB1EADCE274
5074442C400E193F57DBAE8484BE3BDA4307196F360DE99D28DB4466A8BCF30A
54447D2A4732A1011B943849FB5D1EB8D1D9FE13F4A49F48374F5C5C4C77D496
78497E4CAE434B27984DCEA74FC132760397D4A169DB1D4A5FAB2D60EE3AAF1F
FCC20B3E66262891D7C717B144F260E0341BDF939E2C64E070ADF281DBD25758
844F6A52A524EFB733816112D29268EB7E908FB535A18CF0B111C018C171173C
5D37047E511D69ADFADFE6F3728B5A8271825429AB4A9A79444420BFAB25B75B
05D691BB299246E3234841F92350086F1112D62179FA5FA11365083B1B5AC966
793A112111FA330451A90309EAB35CE3F744CA613EFAA22BE1CC12D6FCE66309
9D2161ED3CCF48DE7BC71B1789914866F0AE43E6262047C34F1A203ECFC4F35A
3DA06FB9602CCE11578B777BCC85865BE7C0E71746210A62D9EB4610953505C0
33645F844F844DCCE85E85D542D6D7E64DD4586CB03EB0946352CF5840CBBAEC
958AA09A63684540E4735DE7BBC90A2690ADCA90202CD6CF5755268F814B45E3
D6C2DE638DFCA00B595766B84CACA99638AD07315D5C4E2574D62566882A8191
5142E495AB37A01D933D940745757374A65C7C9FC2E5256EA4D8FCCD9E212639
8CCD5CBD9515215744154113505E249BDA8EF1DC87BA64D280669733ED40A6DE
88352CB01A19C6BAEAC5C190D498D6A533D20D4CD01885C2035CEC164648C07A
FD93079176A7846800C4CF4A28455568DB10FD81D5B69AA0C46FA6871CB3E6A9
17889F3FA4D1C967078E9741F51004FABA216B9109DE9809806E6BBAC1744294
753CBB62EDC0F6892DA33CBA5DEA3B09C1BFC4C72F4F57E30280151A8A3B7F36
6FA167FF82B93402461CD38F3A81310D649EAF044CFEF7882212CE6EA81C067A
3BF0DBA84F920C5C5E4A5278D767176328B3FC1020E41D3D0531EB589C739A0C
FF3DA33DB0354A8B2A7881EE337093F5C8B64FEA9329D818C528C35A88DB110B
018B45F998A209886CC8AA89CCB97B556894A3DE320414C48B150EADBEB4043B
62D3C72D550752E3605F1A7FB90F1BFB48C911D70A2D8E2B148D66C7913A7736
8F18FB6F4EFF25EBF794CCF3934B5A6657A9F9A494DC7421C81EB8951781E5E5
CF45B551F9485648E7BAB08F03DF5D1BD4F46E1FC8E6C7240F55D1CB0A9996F8
B838D283014825031E56582C7B9293E9C2C66B6BC1775295C400FAEA98F62F02
63923A0B66CEA083B97EA37E77B69345FC49ABB6F6D32986DC675AB2300F64E7
61671A637FB343152B9ED787CE356DC7C038E9A1324F3E5629EAF53555E760FE
0D7C772B8273E95CD3C8E9937C08DB36F8DDEA7AF0105ADC5CC114A83493EB3A
C1FC7971601C7A03BE77FBC6A04DDFF9C0A187FAD025E1451A81A38C6428768C
F2788FAEA9F31EBD1C3D11E95F3D6A181AA1A239FFAAD4BDD95862F2884FFFA1
DB336D6ACB150AC30BF1B27AEFEE4E3FFA0812060FD0366D1B50C2C9B551074C
B13994B90C51EB13AC956C8BF817B3ABCC1455E31BE5EC67E71F2108BF0606EF
9953077C79DDCF3AF5B3B7AB2FDEBED9638BEC473E6ACE13DDF821104808F103
8F4872A1580CE3872CB00D960249B2C17C7A5A5068CA967D147D4403FB7618C2
C540353437EB4F1CD9672F1FBBAB01C9FD0725CEF0C3C932721D9565CD3C4B2E
51F9BBF7120D118C3B28927643D16D30A1B7FE68B430DD0963A6233856B9A0FC
6005FF409744CBAD011C1E2377EBBDB66AAB3BB442B4242D5A50730FD13572DC
C8F36B4E91EDE54D81A4930350D30674C5931987FC863BCABE61BB8C24F794F7
4961F0816EF192740C4D670826CB6E3B83482EAF967EFC84F25DAAB56CCA8C26
0E89CD6A17AA5345C3B278190223AE4444E71C69A48C957078482FB2BAAB0D34
E7BCAE54CBDB010A4A84040C594FEC72D8E6F89B7B5AC46ECF93236BAA8DCDC0
0D07FFED0A93BA5D31C91911964450DA6022A0E801C162A6B53D2D16A0177E0C
FC07A7697F14B1FD9462ADA406A675E5963399EB3291F47F35747E22E8309B13
AC51E870D999B2504F00564B9AA797238A7B25AEF9F81EA2ACEB14CAA199ED19
F94286D84A527BA7B530AB94E4E93C231E1FA0258C47C614D6CF7626C989B72F
B0AC3CDF5C17127808A0060F8A41410A08F749EDDB21085F117DE8B3E25BF082
DCD2FDA41AA2F3A13CCBD21E35AD83413A5E8BA3F911CEC0F7026D4ED4EE84D6
734F8C5835A6A0C4AA3E2957C7EA9956FC592FACBBCDB7764F7D06FE3E998367
0F2D84D3ABBC06CF54EA08C9776C903BAAB7105FB116BC5FF5D8A093341A5EEE
215A923541732591472186668142A5544869321F93A6BC8C363D0DAADC4231A9
DDB2B652B84D8037995C3403AA99FA4C27C9A8284016CF50D191495F533F0332
F5BEB5036E73C4767880739B39372CF2A1F228F26F18FD53343CA1F90F75B08A
AF745CA402305CF2674A86CA271B44E0C6567372F233D4CE31665690857DCED6
B804CF811A4001F0FF0FA0C02EE2280FC73A8BE477E383595F1AD512376C303F
AC026AA41DC52FE308A0710BDCED6502D52E3CED2DFAF1E90A47F8D37152860C
E7B751D925060D3C5785624E4696FD82542AA4CF6F2A0EBF8096AA59344BDCCA
0A88D1571DA8F07844E78DD3223699F28E8965F4AE79C9F92BFC77FDAF76DCB5
6DC0D818951EBBCB41E465A065D4A0C74345DE131DA3A98F17FAB268575A9A81
899974DCCBF58AC2BCC02FE40C58ECB69CCD0811185FA09CB4FA4986A854B364
B9B9D8ADAE2FC6C7BB0AEF69095FCF05B7733832234940F6844B693B2912DE3E
7B701572463249B71FECCEBA47DFA7C2CEC6222C91E681818917DDD0689B1D14
FB410308B75D6E52BFBB6A5320343F32091F2A1E8140344B24E8C88BAFB82C0B
8742602EE01F821F6DF3E8DCAB3F4B6FC0C6221AA2BBA74B63D9A08DF231A71E
510D883783D44F02974659210EDD07177D96523A4C0F8B2EB8B44743748D3275
202F5F487B06F74F0EF808719302F7A83A7DBEE6FDAEF157587B4BC3F33A894A
7A5ACCAFB27075B098381D952DAFBCDAA908CB6C20842EB7D27FB05A65EECF53
C2FE682DDEE532EBD2B35EEFB098A9ED8BDF05B446F9121D2CA74D258124CF5B
44B44B8BD626BCB65005B53852625225FA39990EA43A09BFD85B3741DB76C2AC
B42655E526E3CB53DCC0EDED5901FCFB3CFD6CD03E1630CEA4A6A2EF9FED0AD6
97D8CD1A2C502230FCD98A51680C8364F36E994B6A09D2ED86C99483AB82D51A
179BF9506C27D1523444AB0A5DC47A1604E674F79A4C3EF165D1CC93FD81419D
3A864B0FBC164541EE6413819F22A8EA4E8659D81FE579182F26ABDF107EBF03
56715D41C8340D6BFF0AFD6C139E1D39C272B924E2B4BCC093F10A8D6438E52B
F244027A7FCC4863895D59F879878EB2C11CEFEC4FB898CF0BE351F311B959CA
C15CE8266E438B2670D9C9A83B98140D41DE1DEC359633A31D8EF90642844C5A
B05C500AD7F71D0966E12FBA4FDCF32ABD84CC4CA34C321FE4F6C3AB6FA9CC35
50192A99937DD15F9E43963B1F4BB3FFD6171A5662AC17E200523B2AEC7A604C
55F31839B5CD82E568BEB4726340F86131EF7C95FC7BCB2B223D5E6764F0FD44
C3BE2AEBC568D5B0D4714C9397948B8CED41C0790A86A5040ED3F62FB7F0B495
C724483219E155642BD1C19A1D301F6829E44FD48468258545A8F7AA17C1F101
873C77CC247E65509DCE36286BBBD3EC25BAC2098702384B010C9202213C5333
45219002E0F53C62572E85B4768A4A7871C43289B6703B8039168D11C7645EEC
0E8D08177162C048A17AD63991DACB038623083353568DF861
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.0: CMTI10 003.002
%%Title: CMTI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI10 known{/CMTI10 findfont dup/UniqueID known{dup
/UniqueID get 5000828 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI10 def
/FontBBox {-35 -250 1124 750 }readonly def
/UniqueID 5000828 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI10.) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 58 /colon put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 77 /M put
dup 80 /P put
dup 83 /S put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5FD29DA32D34C95E
2AB2ADB3F60EEB0600C8ADE15A2380DE10AC5AAD585FBD13097B1A7E8E210D4A
EE96785449E07F0C8EBC2EC5EFBFD0897DFDC15E5BFAC9584D8DE95C5AB288CD
8AD8B9BEF0B8E5F887B3B0B331542FC8184DCCB753DB6ACEEF98B85756B988DF
CAF1AE0DBE7D37D5F44A2E760AAE3A5197C27B15E32275A64946C3E4D0476FD2
7FDE148C788DD2106F7C825E270588AC05B57E625AB17BDD02306F9E5FC851DC
32A5A6EDC43C770A71419B2C0C8074EF3F222C8A2097CD81A91F333A521B3A09
482A4FE1CB231CE344AD126AA284C3280AAC3AD162CF0EE241BFB4C8F20502FF
118507F5D1B5FD898571015E73E5CF2281085072E00D401F6F59761EEC3E8381
1F26F75DB66C504AB6BABA87D121B1E7040A07AA2FE01F80DBC246CC03C4B2DC
C2A715980C52B7F96BC1A78FCC7F4F52EEED5F705E08FC1E5BBFCAD121FA88AA
8EBE58172C162AF409DBB0728F14923ED02A65EA24E5D52B6AD07777455A70A4
61833D3789C719BA92E901232599767E423D5AD9C807670BE0E7B5CFF8256A20
C7BF7214FFE0342809570F5966A2C43E784F35015D9040BA34FEAB6A6F089504
3A40A9E9D711A2721D3F4998371430FB3C94BFC619559B97D49627BB630F4B70
9D0A8FE4E916235335C3962F3CFDB04C4A3CF714DB5E260F4E66FFF2F27CEF2A
D4AA26BBCAED23B8BDC98F8F453BA27AD7758537561E766B82DC3032E92A9EB0
125D98A22C5466AF069BF72A9BFA052A8628FEC6A6AD0B711DFFEDE3AA2D7CE8
34EA487038EF50F953B8B4471CBA6FC3C53877EC1BC94582B1123EDF44B4056A
30F49394BDE22CDAD7F01951C7013D26979277D18EFA594E8F4F2B5E615187D9
39E842EC28461B9ABA52020A127D2CB9002A673A435B13C10602EEFDBBA6BD49
9DDEAB9E68D655443A5C2492BA061C1391A51592BA8C353A6F6A0708E8860184
2B5D031D2CAB87D618E9F6F7A0BF3F66B3FD5A25BB91F7F1F5F99CFF56EFF4FF
0A35C55658001ED2E97B26C869292F6274D433A5443179DBB8EE987196306348
3F9E87C6422AFFDD30080C9AC4EE7FE5E2DCBFEE4974331F4AAE479FD8806D4D
9C2B85FC69EB0453AD827A1E767E5C484BDFBF5C8D6E2B3C96298B390F22D757
802643A79D5E29CF3AEDF0E12CFBECA4663444FC87F2027571DBA9ECF688BF28
FF0DDB3AEDBA0FB28447CB4B5D5205F40C1E7A525FD7373392EEFFD910AC82D0
98E71660A1B3227C4A2592F3E853CA4CDF64DF19A52582E167234F4036FAAAB9
5446BE102DE2BF43E82F0112C2A20F15A3F92C6571AC761665A905362C4F8BDF
AC8705519C99862CD9C0D75113C4AB5FBB83C880E46B82715B5628890D9103AD
A2329638B95D93C4DECDC5E6C588C9D5183EE6FC28FAF9825F02DCA567306D93
5440987A81B51EE7291107A08F201C609FEF91A8F0587E8B13D4BAF74A5A6815
DE9E4441F46AF8E1DDDFA2D611C889614040B144A5EC064DEE4638C04EAB2E37
4CA8F50FB8C4D65BB296DCCCD39F1F554CFBED96670A91F515CA10EF896874BC
8EF48C6447752C70FF5A06F928DB55586354076773BFF7E94C4C3A7A1C1F421B
A9B4E3936EC26E0C19BBBFC90F021E877F54B62108F6DD1C7F6D5B8E64FC9362
E173F01BF2904B7E5A08B3543611562C2714099DE7D4FA330DB148B560A9601F
42A84452811CE213DCE782A0D7809CFD954D6BC1EBF2BA4D1B18F50FA8174C96
3E0120E266AD5DDB40B3F6798AC28CDC5C3C4BC34583528F5B5DC8A222B80B59
A3A93DC715D061EC6915E6E6E21A25425C25E8747C60F170D61047108826F96F
7830E220C108B441B6EA3198E33C49BAD8D43086E49F5A2BC7958A1A8CD011C4
49045193394696EC3DDD0BE084E8F2E9F0B9496F035C0DEC1CE11409DF566428
D50043CFF5CDD1092F6E0807E660B68163BCA738E8D98FC6EE3F713164CD204C
0BA84FFF4F33F47BC31750B448603D7ADB9AE92FA91AEBBBEC0DCD66980E6955
CEB425ED07115B24E40F53B29B9D840842EAC691B4F591F866DF27556474B485
1C6F53DD72499847109B16C7093984A6B8487D4F3870DD517945CD90E648C1BB
8A6861E540FCF9D75B984B5009B5CC760CBE297042C240DD624111670B703388
6FE6FC0E89C6B4C88F51DFF3913D0CC1FB4770C8CBEADD4B86393605C0B6C468
83CA5594754411B6FC331EF56D7CD6D247FAE42E966583C29239A8F862348D29
60B177984B6B957E733DB4D275015691D91443BBB13C2DA96097A29733CDB284
42F89C85A7A743338C9DD3BBC4EE53F695E5163E6E1ABE5791ABF100B198B9B2
1C21E2FA2FB4AFE7F9BB2D381260CDD3A2CC05BF513AA1E80ED69FA27BC5ED5A
21445BF00BC2F997B356D94AF13736C6D3B0613EB6F4CD96A685FEB672661DCA
206105EDC3CA07900676EB2FAB37F48D2E8207BDE1463894DA3C5B1488AC1EE9
D39DAF691648048F5D7A384B8927F8DA2BE3602669F71D80686E427F395134E7
7ADCC611BA91AD4B7A0237213C60CF2C905359C90795230344FC3C50A22BD44B
55B2044792509F50F5C21F53D9F9E9F063ADBED3AB99E2613B23334FE8DF70B4
6120F2EDF69F50BE793EE145B9FF9C73179DE640FC2ACEB5C6617F918CEEB762
4CD81E665B2E544864D13230B058717B207D3CC5D6647D5343DB4D0356082392
871EFFA896631A7E0D6477942B632074A9A4EF7B09D4701B1639BAAB4E03A40E
9B54A7A4F845CD63F88831EBFA4FB847847CB98F3455CB5957F2E0A0F5623645
DBB5C5564C7F8B117D6E27E65C0F3EA81AE67B4AE4B201E7C4FB0A8364FE53F5
41A7CE8F834C2C4B322809B353A5E63BBA7BF3B7DC1A85EA700BD287C2BD3FC8
2832B0BB4695FC937FF5EF06FCD87DCE6DE793C2B1EE10E6450352C17726155F
220D550B1759E15AB2C1D5968E52C8080CD280E99D3CCC0E80C2EF8BBFD96001
A226FEED7311EFB4B67F424B557A877379A15BCA54780F0CD2CCA00400B9B39D
981C6B552AFD2506D1B23618FA9AE6D8143CD7198A8482CB416CCE62B992347F
337D505A4078713BBD91E5535BD58EF0351EBDCD749CC24D4AD39F8CECD7D6C8
139756680A4C03A58B3374CEC658D30160AE4863A3938A891BB59CBE02BB451B
1BA4B2B6E68AB61DEB85F95E3C909B8B66E220B9F18280161C279F10F7093CDC
100A53D542F071CC0A5AF834DC1D18738F5DD62A5573E884E1FFD22BD810828A
1EA47F8218C15A2E97CBC609927DA3CC2B802EA4A0D7EB57627C135E3B065905
F97597D818A2C5CC6F328AD25AD11FA50F1E4FE637980B7474D6F85A521892FB
72989AABEBE02A2D0EFE88A6F67AC29F5D8DDFEDAAF465C439983C6B84389FF7
A6434462BEB7B07DBE4BBA61ACD4A60C55B5C0AAE527DE381DFECA2E6BAFDC8D
310364ECB42CAFF72BA93C067B2F02D1CA7C34AE7CDC46787A0E234C8BE8A928
7A6F3DDE0338FAD532A9886E8E3525B85DD39364AB03EC4C0DD25DC179CC1989
1BE232E387E857C78332D834679195E10F1E7B87B7966DA3B2238F53D1E13FE2
8F55ED6A92A750C7250C9B91E29796621E7E9520373214D7DA81B2875A986D33
80382AFF6DE1F829F048E57664D9C4ACE91E4684A51023943A4964AB5657D610
3A5405EFD4CFD1EBA684243E15093C9667797BB47617B66054EE02C41FFEC45C
C1BAE8AD56B00D323FCB1D2744F061FA16E161988741A319B1564E04BA210996
4F9F02A3268CABE450D166A763F5284954564A1C86B76544C5F5ACDFE0D758DB
865A1CFCF9FE8CD5F9C3B2998C56468FD52DF8EE60C6935A3D221EAEC7714E3B
301371C7DDA0B03A2416238F2B47BAD3A2C5021C886DF51C695AF9C87A864B48
3BB3FE0B355EED5454B59B25A0D8A1B8CBD356C24F64D9B55E16C30C011365C9
1E0380753BA3EDC0868788D5F50B9353D0227BCEE1BE36998B2622C0759BD66B
E4444250589F9CEDE766D8B940770CB6B89503E925B35C00CBEC2873D2DC4A29
0823FB7A3717B69A7DEDBAAECC067949932728E89BEECAA91DE3AF9BF070B9C0
30EEFA8C0A55C8388CAA2F0515915C98E67FA095BB98967D14B0DCAFA9622E4E
2E0EBFC768D80585ACDF28D8A5C2B6EE2FE7AAF62FFB90F569F84A0903996DF0
C1D5723366C436E4088F3E2BB9B47F9789052A71CF5C49908CDC1DDA194BFB89
14D7E3D7D4D72A150FD6FFD8303E9DE5A97A71B808B8BDF2AE466F31BF5D7A4A
44F81230BBE2B456A221E2F72A8B59F8FEA8D31F8A005A5BD93B9F49CFDC3DCC
CE2B67090460F632271C7157BDC2F05BC2749FD562FC28682A616A52D1B67654
DF78B7843A9EC26A7DE2EB168F874904C2915B97534B2D4D9F74A9573A771D34
9F7BC855E8F794621BF6AD471BCC347E2DF5F620F5C209E33A4CBF1EA85AEA87
4492A77342DD33EF615FF34037D660B713C908786D9022051B825226545827A3
2AD1B05D654DB6E6D261B4E8AF0933AD1F0FCFC7201E1A7C1B4199F160C38676
21ABA2DDF1CEB655B3EC3226E0B122976EEA998F7A5241F062E54AD1DFD6ED26
47C99A439E0AE95415059179867CDD3F0FF751F3141309F40E00A6C7C28433E4
F649BCD5DAA64177580E05C495EE7BCBCC5FBF104DAF360CC2711386655B26F9
D349D887EEB32ADE595241560FD5924A1745A22E6A01DB9C285EF14596EBFF0F
03F36EB2E0A7C3864F819EF7B0855121292D49482F046A55CD7271FE03F02EA5
886864D9D8EC22A68C23089EAEFFF03DED6484D8C341861EF8B6FD3C5BDF5AC8
352DA4E13A1E30D0CB71E090E9CFB9AB2CAFD0CA7C34AE7D8E3B2EB4666834BD
9CCD1AC2108348AFEF6071796F4BB2FFA4A67ED917E76A109FA2DC2A30D744A0
9AE653A748C1D18FB52595D84E87F1C1FB6B2F32667FE203262C66627AEFFED3
92B23861E5EB238BB4EDCE09DAE1C65BAFC198CDD1B45D42CDF93E16BB82D35F
821E9E49067E966AFAB2AB52928F8DD6359984071FC37AA652FB834A09E5BD93
3AFAE161140E74C6531E413E8FBBFC42BFE8A464B71EB1D8CAA93B33D7BCC3B0
47C7EEFCD3E9FCF26FF9441DD9BDE68D77AD7251C06BBB9A2103049E8827CAF0
F26BEF33F656A690235DEEC623CC519AFA82DE2AE16FB99F780FD7D8290DA40B
9B604AEF36B529FD184239E7D50561A07428D28E51B55546590A1AEAD4B7F2B1
AB8C5B9022C1FA03E33F8F409B24911AB8BFCF6EF4A8E415263C789F89063E71
C0910DC20347469380B7FC1EEB87D4CED7F4A361E58B61C91AFCABA35C03F978
B9FB5257C31657EE48504C355CE893FE3C553274C641DBC4004F5D5B879CC5ED
D3F21F867F6DF054127067DE86189F0B59A1B90FDABCDFEE61423609D888EEFD
F4A1367129962110C651D9481CEDDB8C5C2576A59AED64E95F7ED042AEAE2F7E
81AC0C408E593DC30DCAC334EDE9EE27D932B98F040DDCD195D6155607DD2038
970EB78221A94C52BD4F0EAC65F1FC10E5DAA93C17266F351669CAE56F42B68C
6D01E1EA03AE554D63CE76D800FDD9CFD89F80A241EAEFF7EDFA41794EA25CE7
97BD5028464D2CD45B53834B4AEF8BF0B9E7C6ECDEACEC887E8790A47A93F668
A9095E5FA1116A122C0E5B74E2226C654D3187C6CFD8807917820423DA3EC1DE
AA020EEEF2280C44A15209EE2F3FC1776875308CEAD38571E7BF889F287E4594
971A83605E0B4169D4A23EE790515223DF8724054EDAD905F57918FC0BC64F96
514B4BF7DC9BA79E763C22C977FB6146B10D26FEA1BAA7BAF21312F78D1625A7
8E242D743471DB5821408AB786E4A7EA9D35E30E85533C617689F95758FB2C7C
392E759C299DCCE36689686DE0C4DCE32649493650BA194A6208C5EAB670B170
3F2C70BF0EF0E3BE2FB0A79224FF4ECECD6BB3388C6D06867A0E5E3DB93C1B2F
464C23E44D3132E7D4086E3B59B1D13F49EB4772DEDF8EDC4F603217233FB7BE
C13C28648E9AA51D53F11FB896839F97AEDD8834BCA53CB0021AE91FD8E95E2E
F8A094093AF556B9639F508A401542B06821FF9DE1A745FE9AC5CACD5E8E1053
911442FC15CA5333751ABFE2C617D38FA1DC332BFEF44AE569DC631C93EC54D6
261583A695F5A392867A57F59B741EFCD2DCFECBC55D1EA5F2317601C9DFE9ED
D1EA466210FFA905A8F85BD58B98991BEA58DFD1CDED5C9B086D42CCE632DADA
147941917B879139E016B0DDEB8446BA017FC8EE5A354533D667B0835F5D027D
C2D580C16B80B3D05CC92C0465CAE077729F0A15B2DAFC89DCD349B3F81D0516
C65526EB5C10E45A8A85D716EE35FB9AB201FD7C89ADE5AD925A174169DA20FB
61E96C73A143DF964C20589EF24A0FCFE6195317F2FA0D2249C0D8E649C3D9AD
FF13332EA2E4C9CD36D8443EC8F027B61CEF92C6A6B72DD4ACBACC16E429A9A3
F5F29C1631360E32F8C1C93ACB22F810B86D2969A7480F486F62F8488BEEC74C
2C1AF13BB92BC578E8CD30BEA6BC8CB68ED730F54CED0167605FA76AD7B7E88C
7AE7688E598F91C471BD65A542E96D64B1EAF19FB4F1234308C48C2DC86E2193
11ABDB4C6189C6F201627C693691A86DD07FF55C30FDB3F72381E09C6080FD7C
9182762E5001E30F52A216E0B71E4D2D4E2F3B20F95DF3A11FDB2D2B5B5FAA66
C46226D5E0C77066349770514E5675550FAC9394FB27CD2C2F974F1FD58C04A3
1EF53A8AB3B2202CCA1CEFA66228E1480A0709436C44BD3319C40CF888AE4692
5DBBB52B15CF3A518F627F672135A24D5DB9B2EBEF04C860AECF231EBB5A3BF5
6DCCD5E72FE4B6DD29E896691868A7DE4120AD06AC573F5608B8449B38E71CA0
EB5CDA3F942482EA7973661170F81DC88D54DD5B92323F46F833DFA757107E9E
F62A47CC50FAA1B68ED535C3E0E1073532A05ED339C8D70B3B9864808ABACD23
AA95E9FDA43D54C66A675FA074E0A5B8777D3C07850A09087F36852B5351F35D
8BC4DDFCA35CF29CD5E3DE118A741FAC4DED36847F2E2C6CFE08669301722D94
376F540982958074E7F1383C409652F6C99DA39FE90B38221E75BC1ECB93ABF6
B00F410A0C5651DB418566AB350FDA1789AFD88286AF3BCB42B98386F7BC144B
02DEB8940D20A6B3062F0C4244EABC50923390064F1D027A8BACC3DE45156E56
4A942D1B87F1C4A76B0D4D6801AE792CCAE3009BF25368B31B6AD5476FBD3BFF
9759EF463EF5E78E10B7BF64005B2ABE0E8813950A08A1808587A98E0021D0DD
751AD515E8278F1A0759E85D8A084490BBB0F8206484AA36388B1013643D3198
3509078847BDAE08E76FA5BF3E3A73C323CE093DCC148E3C02C2DE1E26C94D5A
40EC8308ECB02FF7DD04EC1005A2A0DC74D4E587F10A3EF349E828F69FD38962
2F0C74D5DAB3ED6CC9F97008ACCE74C086A503948DEF1AAF58FC8BEC703CD360
D32098A56AC776B1BD08442052A2A4EF6C8798F7CDC102AF1A2009657254762A
0793F79A39DCD6ADBAA5EC84A7ED6018BBE727E5D477893D84F157074B24C13E
8D4881C7DF8ADC13EBA0D89745EF93B7616EC5355600BB0D2B630AABA3CF2946
AFFD0B2B724EF0F28393F20020B297DC48E46FDD7E2DB73E6220B73F09457859
EDAFD69B32F39E24FAED2E34AE3E068BE7A9DAA9F9DF7A32745D28DE4EAD3AF2
3E0EE0D774EA9AFD63BA149FA0021BF02B1149672066512D01CD0F89D7E5C1EC
DD3A63E5883BFEEBF2192874E00E4682CF0AE4507F9B9ACF4C51D84028CCC051
86338503B9111E9D8019C98F993C5D82F253F83F629581F46743DEB35DA63A24
D81C3E5A9804EA61472E0E96B78BD1D5A73E157AECB9F3F59C0D736946734801
73814A7E6D2C681AF408F01D5792A583F9279B1DB7A1C0A3AA55193D4601EC0B
E3CB303E06CB7E9F446877A679BDB33BA020167AFF72DFEE7D9F828461015B69
882D5EE1176D9FC173C6DCBF776CB6B74663C84FA85FF22A970A1C98A32E96AB
ABEF97AA74977817CCB865978492F2A9FA7A855C906D222033295A5610C7969F
FAE73E095BF64D523EA5C09FE173C3E2046FBF8E8314FD02740D8FBB7F39F77D
80B1764536349D012FC5E0D4B25AAB227DF02E54B72AC91B9308C1E8129C390B
C240DA061C1DF891FA1F9C015400377F1CA321DECC560881EE58F4131636C0F5
16FE87B119E547047F436973A53DE4F5084EC05A48D2E8788FF95705DAB0F8DA
9FC8B7B93CCD6D4F24070097AD9B966A19934FC26311B7F5F9B82BCB01902D82
E4EB6BC1D263A3F79BADC001792669DE7F11CE8CACBF994B414731F0AA41862B
F57A32D8575FF60CD63CFD0F284E3EA306028496CF265A4ED6A5B90EB70E2BB7
C7C23B7B83DD252D9D48E095AAAFF80BDE1F354A42DDB04462598DF2071337F6
9B8C5422B1DC82FF76904B24129BDEE930A38E254804C9126F6A007AD697659D
0F4B9B7BE0BE1E79D369753B77981AD11AC315AEB0294B62BAF5C7D5653F7FA4
217D853967AF5E3659D9628533AE56E65738D67237518CBCF295C49DD50C0032
0E13B01180CF52A9D650A9156DE096E405FBA4E1DEBD858C6E73FC1FA1CABA52
6EE6DFE1F92B3FCAA32D46AFDE696DCCD3A426222664A366C18C83B6216A9599
E4081BE9494718C56D998F9DDE9AA52D0C8ACA32B5718352E4CE45863BEC1B5E
8CAB53041473EED2641FB9477E2A1243CB0C69C8C05AC75291E45321D24074FA
447D8F48DE07C687E4C4DDA2434962A697CA30668A937D4B743DEB076D8AFD24
3698E993C8B309694819EA9FDAECF9B9BB8E4B55579F650836B2FAE102A8BEBC
5D670E9ADA6BBE4098BB47894402F0B11E12FE6F8C7D433E89E13B0A32CFC097
B05F9D1BBE2F93ADF2D5C17546639BDBC67E77EFE440CD9126970121B0F16E75
58C4E9DB043188968A9B76CD36A6C06A3501194E9D6EFD528EC692CCF0512FDD
24CB36B536819AF5EDC88C5B249C58CED5C6CBCF63B4FD2248E131529A024711
AFF1FEB19B20AC9A3E1BA1D49D6D50EF51C89F0590AB44141EAE850660775DF5
34682AF21D419AD470F9FAF4317C060D67CD675098B616D5AFCF5102111441ED
02D5DA83B12C9ABE40A82B27F8C20BB8708E8F33CF4386EB6DC4F7FA3E7AC77E
51E1E4C87686DD691FB8ACAE10E2EE81DC8021C6613C5FA0F5B9C68E65543672
E1AFE4F44D0542BFD82B5151EABE735547E4C5883DC0501293A5FA8766564799
366395D984AA81BE85822E2D310EFF32DACA288F20AE2DDC41E023D7476F0734
2ECC66E68B983E966FCFB745795C4D2C84B4D63BF491FC3E1E4DF8435E64F84D
83E0D1AF43E12C9D9374C63C2AD567C15FC55DB4B7FA07B3A2996153ED7E3547
EFCE953E23ED382C60AC0C7CEDBE71B036E9E4C51109CD6CDFFEC11AEE1F5551
83E21C05CCFF3060A005B3643C3AB8C5897AAE9789E0AF49297B3A8313C73737
B29AF836F6EA9651F87C99B171AF91AD19193D5A4BC6257DD1CC227FED7547ED
1DA6E35253BE7A2FFFE59642F96672DC74CDEFD3E5D7C8FE54C9A6EC3722200E
42295160E28FC522073FB1D7F6210071C2064C94DE4D11496C62489C1ECB563D
4909081B149AF2355253D8ED64068E54C8ED25985087DC16CB98FF0F2606AE70
22A3315332366CA17CBE3F97750934A6C0C02701DA83E7A14B07B81AA7FD28BA
DFA408D4B6504ABD103BB8415ED412CD6D6122A8A55A0DBCC68887E484CBE446
F7FE2409C705907F17C971BE53C6615D317A59FC78F5FCE9ED80DA8EADB0ED2B
A5E4D5BA205B0F8AB3977C1558E1BF2E5C57F93C163D2B074A54E0785BD51D20
4C845F8EFDC7551CFA214D76FAB36DA95E02B2CCCC548929E0B3F7E3CD6C25B9
F29D88BA02524A5F859CCE7C107D26A1DB4D844DC1EF23F9AA9DCBBFB7D84793
1F4839EC2EF26AED3E509B390B0FB0E5C3F43774D0BFBC0B3F2CFD58379E4887
217C354561D1AAB605E1DC1105879AA452A046BD6E2257F6EB8031414B5E99F6
3434E84E902B787151A44F3282081C6E484DCC8D757FB88D35C1366913FFAE55
445B77EAD10492E9E4FAD8C1EADC2730DA5C706663FB9CFAB45B3CC580160682
372FF89EC1C2738D26672DBCAACF5A832D466825AAFAD28CF0E53350F572E667
E89B8DA6C516230AB84A3A910E56E53C5E92792B945E39289FFFC9B056DC9F93
0F4852F9BAF8FB8FC87BD5C9CF6972AD20ED338DE2ED64A087C4FB198BDCEA6E
7FFB4EA13A882E5A86EA68A11E61AF16CE3CAA7ADEA790700C3C45FFE8979563
8A288AE631671F8E0ABABD98F254E8ACDEB9E2C53B661230044C244C063F8298
7C3D4D23FA2EA319CCA3B669642A3994009836863F6B8DE0E816C2B6693EE961
DE2C59634C3D29F9C91CDB250C6BA1D5E4B7871045E236C43DF42EBBC64C990F
5AE97BCF0B0D1AEAB7012C9BDB3C0F8172C46984A7960FD8AF8E630E0E89DE94
F99566200A02139E718BCAC484E17F4D87717E43F5E154C0A8F07817E5A6EAD3
39E1D5907E6CD44ACE865D7E44A626E7F5B6A2A49E0D48842764BABB9977D993
B3D3BF3AAC2241EFD95D5468EED3718672A7F4F80CC2F76B0C23B3B91A743800
B3CD1BFE8E138580C35EBF1BD6FB9766AB62C550AA0BF5B23A431A5294D175E8
5B1210B5F91F1ADF0F117B4A66C5F6D709F74F39CA4266D1E3F61B2D4FF1127C
0CE693575E2F65C1E1C6A584AD53B7DCE2A0E1C9EFC8884CDD66B9DE10880F96
E412BE9434DEE1D262A80D85D983F0055298DFC2A4F7FEEF1AA3D651AA0382DF
55B9C04913EEA6E262DA664E8A89493C6FB4B8A8F4E7FE22ED88D6E697B15014
6511C331DEA03E7272C93617EAD81DD0A629ADDEB25A1D216ADE1B2D4496221A
78A31DB5F09E453F6634FCF8B4EC0948E0F64A208511B75E2204DDCFA8FFE425
8C7CB25C9AE8B9E9E21BD48EECDC2197659B54180E049800A1915BDE90201A68
8BA18599A1C23EC2E8017BBF13CBF11C93FF044A13AB8B5DE68C80FC6B0E044B
EFC616DC1D02A225CE5FA2D4E716156DE37A557C9F8242F0759315577262218B
E4839C5C355BFAA53B1E196E286979053510B4BC759D2F0C2D8789C2211E76B2
39B816C8105E6D979CA156A0D71F44FDAADA6136ACBFE694FCCB91BF7A13A3A5
BE34811A6F196022ED9E964B5C15E43BA6B2C74C9350719CE5F89F06BB05E56D
915B92560616904FCDC1C6C4B8A1B117C5496B94BF75AB65E240977C920D4899
18DBFF37340C4757635E1AABBB66283423FC752A0BB9EF0B8A1C3F34FF80309F
27C1686CCAD7DD96E50FCDBBADEC6A0621BAF04A0837FBAB3A574BFCB166A3AD
1A193BB6ABA1AEF187A92AFF2D72E8CBCB782AD7A0BE5B8C7ECEC6DDE0464C4A
A3752AC82D3DC00BD899BDAFADEBF2C135BCB56700CAACF5930F312CD69FFD4F
F03D5864FDFDAB5D5544EFE0A46E998BC239F96D24EC828C74E62C3772A9AC32
3EF1EA3F4BB36B7271DB4AA177ED4C1978131315CE6CE36C17FB0F9510E242E4
C4F93C8EDB11385FB081EADE949ACBC1C5BAB8205F8C3408592D64035D9E263C
0C97CADEC4714229961F51708969BE3B79E4E4B7C88DE12FA19A83397C5BD41C
39E39FEBCA8B4DDA4F7F079FBFE52C3BEA12F2F65DED654F85D7E2CE711D1825
813F2007EEF71D701457301B4BA407EB934FA63789DB787CA61267ABFC1F05F2
B6C7BC145213E38FEDCC4208A723D89ADC322E4240C083AE27E03812036EA847
C25DB6FEB5608AF9FB4F5E33E6EE542F5292DF06C174A328012E0F29937EE0B5
AC0C81D59982922F8CC0D576CED5FC0448F6DA8ECA477EFA0A49EFFECB47E808
A0177053A3F9D74C118963A8D4C0C8C4077FA384AD71CD5CAA14E12C5E8B8A19
CA904799203B497EE1EF52FAC509333CD7EA8BD9746A9D8F2F6D7CFF8119D648
39AF03BAD90E370972B7772443C43395FE1CF2DD9488B8C3C36944DA0E1BF352
A20A40C42A458EDD6A807F49B92EC85D74EE5654DE56C7F90EA13870FA983770
48BEE8ADD5320B1BCFB4D14996AD12A0673706285D62859BA5DFC0AEFDA05993
C3FCEE47B978E1BBD27B7BE6A796377120985B72A256E10C653B0F7E0D16C072
CFAE3BE44F056EA62AB47134D547F469A24102351FA4D5B638C763A211176547
1F8B796D0E89AE908DD4031E9BEB3E582CAE11D8B4919689DC056AF826CA2691
EBA65041A7FA8A2D045506BEE59877B1F4B9633DBD934C56C5C3B3C398190052
83194875C39D2BB781FF7D3AE52932814CB63705B49ACF6485E444FD1652126C
C29434700F673F1A763C9667D05A7ADB4F8C533E92E14A67EA6B2C23A238A81C
187F47DC4C4C5F9CA7EE62968F1AF2FD545EA4D396BE472B380477F5168D7BD1
310324C28663B0C1E2A00EDDEF0924D1795CBCAE5017FF8BD8E1A46A6807B277
F8121FE9F4C6AD699F50768E82B88C50D7C7ECA6C2E7E0A6FDC02D9CE53C946F
96B916F0580D615AAC7E1BC88EF6DD799EBCE0C754DA58FBB9345061654CBFF7
BF724FAE901547885CF7DDE2A00DAEFA25E7DBA8360374355A8295F4E86F8217
423A83C47E478549EA7CE77806299A6D8F84C7AF736DEBEFDE9F094850F0BB97
33DEC1E723444A0883DB7E815C066C7651DC788B33ECB1A18740FC73FA48F3C5
85F9ED75CC107A74DB58086D82DCE6D7CDDFD5CF14F6BC986B73EBB3B61328AB
A7EB871BE9092D1C8F15431A61AD9B26CD95B5ACF3B64B27CEF3186F5E89F5F5
2891819E0B5988523ECFBEA52055B6540F54055A68E35058242E5225764ED6F5
723EBD24303B81E182A3A6E1E729A1F5E4A881281EF3E2B001609EF373F57BD6
D2D19783AD8556E2FC0EBEB3FABE285257C3A39B020992D7C516FEB27A823CA5
C7BF3EA67575531211CCE2DAAC29A68E2446E4AF11C73D526D865D9F710036CA
D0AE1247BB9EF55829E904CA9D0633DDDEF1D4EAF11D31013AC397081D9A1D32
986BB080DD69019EBF447AE07EAB7CE4B89E460CBE64307B91A76C6C792A6040
3A6E318981092EAA2C4ECECCCCA6719DF7902E559502178FB8CA18B0E52A9C8E
45350872D0D1C0473B186E6069ECE024A38AF75972142251AB9907D7EDCA1038
FEA46BE012719B3EBCB483F2D531F08AF45ECA54C1D5635FB8CEA9D6351A9002
775FFD5C92A7150268F520015607BC7D4BCD63C0076A07D15AC7A96FFA99EB17
E5C082E90F225B910F82C946206D21B29C8BA64C9EB17DD7140E440DAA8CC0A9
2347EF469F74765CACE21736DCBF9E8706481325CACF1EE2F7E2930C4249E499
AA36B304B1A906635E1420346F27C2031D1FA433661D7DE9E679C68876519736
779170E118072510E920984884994D98C08914714CAF3DB41A718513E372A1FD
7BDD577A27E7032B58411355218EFEAECD0765FD9BDC2D87DC840E2164C8FF8B
0C97979708E6203513E7699C738E12AE144545A07F1515B2A0204C0911D7BF80
4D622373959C2280D32FCF743636B6F318960FFB4D179A714ECA4A06D3AB15C6
FECB91F02C567E36F7345A3DCAF0AA953807DB9AB35F160802E28C61FBDFF068
02D9EA87AD2FEB0E5D9E29EA1E6B6C75B4403AE8F3F54E5089869E463CD15254
57615C6C41B66A87337218C06D63C834DB537617C455779EDE7C0BB3BC23B5EE
E3C19374E590CA5374E9CEF45E03C18B02BBB457A25D05E0882F0C91BBA7499C
CB8C4431CEF86BD83C89528BD80B916ABEFDA5D9F60268542359DAA748484342
3008A0B182D8F07197FEE066B37B6AB4FD35702321C400C42B7D3273453DA98F
5ADA485A644AD61DA6EE60952E5624DB9CD52E1CF1671C8B960DBEC11369EC10
80504B96FF22717C0A49441D876C0B14BEFC94E72C064944F1F3134DC8330609
7F02D789BE6F8220E300CB7A59A7B753E74BC25D6955741F89BE7C93AE7D2EFE
0786DE70C04D84EA2949E5483AB4433413E675B47B96ECC1B111EDD808F4CE9B
8116AB046A1FB9FD8B91F31B4618C0A77A3F3F144D7B154EB46E84E3502D33EE
3246178B308C39293D25B02939941643B765124DD6E749D87DA045186D266BA2
1AEBE3BAA47E1772E658211EC017790932B53F1F53D10B53693BEE5EDB1601C3
E94E167D6C6E020608EFDB0E0AE1E79E9E60DE8090AB6E52B9FD729C3A4A08BF
390CD732AB26F5123B813E1C9416E9781E418FEDACF3AA932AE3A91462F8D283
B132213979149CB54B6D74F6C3C63606C64A871FFC2185363A9D540216B097F5
FBC7F9EC7E513BA997691F17B33CCDE81434C1B21301A1B72799EBA8EC836EF4
267C08E69F2A38674D1653881E7EBDB187C013973BB3905CD1A5E9164FD3F901
EC54924C6317017EE750279B592D28A59505526BAEF83F27A6EC843E9558BA28
881CB35D9B21AEADC2A336227A3D87139C42C020C24969D72F8011091E1C44C4
D9D5522CEE519304F05018A928EA6B67314E7018EB6AA7AC5C6A918B81178C2C
2B064CE974BBB2907B1714E31689FC7A47892E4D198060773CEB1DABBFC7BF46
5A1AEBA5F4B76D10F3BA2AB638A2A2BC2F1E7F36E1FE57CF82081E920D0729B4
4C4B49914CAD782F13E673A90D9810A8988A5BCE1452300F05C36490CC3E8104
7C36AE68CBB1DA579502B7256508A196C56EA36DC70AF45329326E8208BA0397
1FAA68D97EF4DF6E7E8547A9A0A2BE8152122E2B72F5CCB3DD352CC7F031C208
3E23265DA81EEA045C871E691C3B942AEE19BEBC3EA132AFEBC2C2F00B5A0BCC
E07CCF4C82B3E44DC9799EBA916CE66C67D17AD3F075978BE97CA2C88C9B6330
0B36D01A196C0D2A65BB117E1AA45B0128037A550538CD98B0D7B68F291B12E3
D4B19B510AC33C66855BDAF05913C8C40B6009DE307EBBB6AD95A6A5846F9927
E74084A9900DB80B95166FA42EB5EBCD0358F0340CB11389C307861BB5BAF2D0
89D77BBD27201553E659FB0E6D8B01DE5A41A1303CE4BB54F7FC6513CA35421D
52BAF178B2025298C232ACE59AB4450E4C9BEED013A3FDD44F8D670D4249A4D9
DF93E043882BDD8F4FC4C1159FB90CA287C24AAA0DE7F6C69A7D0C320B03EA88
0195A0AE4A0129FD608336D1FE2F3887A4D88127DBCC5A41041A275EDB12A108
F15C04B37BD2F2BF4F594423FE4EC50844BE7A22A5E4852782AABC8905264E93
82A4CA300AF0D839C84624A63A5849C36DD4E80E6D5451F573BF8E9F9516D675
420999F17A9CD84424913C76D541ACDB4C1B2FC3F3CC6C7152F5C603BD4DCAAA
99448CBDCF864C75595A369F610E1BCBB68477A595DAC95307A8951A197DF299
237587648D64BBD9500084B056849F5E364AE774BF64A2C9FA2E1CB2097289F4
8E27E6F48D1B19B82F90CC290C1FC32DB6290A68B2A640A8AD3693DF426F4343
180808977A192163D84BD7E524E53BEF09767D4C4FF2584BF2F285DD8389A9C1
165CED04DE88024E91F30EF9EB11EF3C1ADF54F5EA2DAE396FBCD6CF14772149
6FC703BB26B838853AC9E8C78E5B38837D9584EBEC804D15C0FEF5C2521AE6B2
4842650CE9C95AF87955AE9255F76926260F08A5ED08962324EBC48032F34168
6675BEFA8396C4F1FE68B1BEE12B0E1C55C8B331FF95D5436BDBB5CC485DDB95
CA9FD30237D9182A0C285DC218FF7521979949E96EB5EF23CC3F11A2ADF32501
5CF631A8259F0378CDBFA6E1A1FFFA75771863AEFBADDBAEFD7A6C3FF2324D8F
4A5C293725DD7A91F1ED536615B34B008BAD91FB7C212E45AA7BCDAEDCDEA3A5
62E5FA38C75B14BBAA6540AB015075C45846F298150A404FF4998E72FE58B1CC
441E47C6FFA1E0C4D2DED00D3BAE0BC7B0C67AEE40F0E5527C3270D6BCE95581
F0EB77961233F85C40F8B52785109B72A950005282DCE3099B21F8BC9DE37115
33A9466BE9726C864CC7A7C8B09B1EBF267974929E82418468A140944B766B5F
ADE4758823F9675C8E6D796E543AC97E54861915A665D518903B338C35F68A74
5DF0C48D2A22D9A374843E50B9A82B74BD918EE56AB844D931A7C999E75E5BD8
7F9B367F650E0544B3041A0AC738789129A2B63C598F1EECF41FB3E978571994
23E171F1EE3E303A57C82707F55B806CF4EED502495912E3759112CFF552A8F2
B43C41FD7C942E48C572C0EBD835A785517CFF801A19D592C546F0180D3C3C1F
0B13A95921A3781F95966B20F47241E7FAF885316BE96C8F61107FB51556CB7F
06505BFDB81F01A442CB71DC45B74CB4691CDD07EA7F341C6A2BB845B3C1824C
02338B6E1122A42FEC265E1A4CAC2EE3F958B748F8627CB177CDCC47BBDC0C08
0093592C6B5CE57517F1D62832D23D87D232010CC18E4F1186D8C848B1DD59B1
011D5C2D17FAEBF1BA95C32DE7D83916D823C50BE6A95D5650F5D8810BD44C7E
3D1DDB22A1466F668273115F4B1DAC1D120B55B16386A7ABBE0ED60CADCBD729
AE45B36CAC57E0DDCC190FDBAF6759417A89D4DCD5FF51F59928A4D82D5FBB87
A7C895F3D52C188556A440B87842CA438D1F11469D1EDCD71B15CEB35128ABE5
49B788610E084255570FF7A907E82055168C46B5A98D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/UniqueID 5000769 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 77 /M put
dup 78 /N put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AAE0FFD5C119D11E5D13743E28D843B0F2EE315A2ED05A510CE53A2D06A7
0C076D4B6BC2B6A928553E7F0FD472760167DB486A777259FA74245EE37D0125
47314DEE4B29E5D22180BDB1BDA7D33406FD340DC3991F50800BDC90F7678EF1
1064986DDA53A77FBE2EDD38E20C41EF86CD50E8EC167344A3F3B3C3BD83CD80
87BE64CAB701C6AB68B224A626C5F44653170C361E2F7E35FC251A050787AE9B
B7C1F3A1419789198196FEB13A68A0D880036E0EAFD6C18AF8C665913019CCB8
D949E2E1770438D7382EA884C6D3864D458E9CBD167762A5F7229E59653A63BD
FF3F8227A00DCE3C36D513BA4D1576AE6F913B72C9C0BEBB49A845A9B5F841C5
84B51C58C80B78F74EDDCC7690BC7D9ED4B581C5FB0FE8D596A2B8AA5AC8EC72
C9AA1691F0CC41F8E49B67908612CFBCB642D555F201CD7882ACA063C1171E2D
67DBEA61C92DBB324C90207B01A09FFE2F3B98056F762F7E09B54876450C9D5E
B49A0C07414D103B2A106F094EB61E46097E35A1CA6EACF91353D8069B4F195A
1978A436074A7CF8F1382A255195530FFB29F49F91F598D2AF96F6507400E7FD
78FD1EC1B53D666C35B44A4273B5713575964573269EFC1770D92B48D69EB09D
19DAA9E11772FE41B24EE1C357E7DFCA592DF77F0842C8465DE4895470F7EC06
589ADCE77D923B7814DC0DEAAB9886EBDC70CFB6A3C1F214100DB6D628B2E38A
D8F2427EA5CAC543504811C0BFA88BB1FA9A4844FB97276099F3BD3D208BDAC4
59BC19C4B4E067615615943618E8093AF5EAF56A166DA976F6088CAAB71D88CE
BF701340BD078AFEA43335D036B94FFCC78A19A30AAF76D0B679810D222255BD
796404E186AEF9378B49D3984FAE94776299C94F8D7EA13646F5418CAD07634E
FC02E9B7F70E1B6F5B85BF7F22D78DBC8392915AE6158DAB4FA4A73BAB966F0E
F2A9707FD53EABD543CF38FF092D5B1F99FBC862C4F7C74D5DA4B06A457976A4
6E5C1724C62D5017857AF11B76420F339B431A10E8A2C42A251B5BA2EE017270
AB988F40F733D4A0C8D54C18D9008610FD00267652D2B95FB81B44AD08A9B67F
58C69FA338EB59F623F49D51742EE717B0414AB2307A91132126922EE17AACFE
0556EF0269D9FBFBADD9285C4C53A17EE3658EADEFB111AF7AD898C9CCA51098
8D1D75494E976131EEFCDD53D2CD8AF4211F917678D84F7B0040445276EC9B5A
80014443E994399FE88F2F7ECD9B31CCBE0881271ABB21FAB3A34554EDB993F2
C762E4D169A7C6BB06033880D31C71653F4352172AC95E65B109E190B51D879D
84ED639EE873530F9AF1AECCA59FF8BA47DBD3A5B7E6E36AB7EE1131490D0B4A
AE246C00E4AAA22311897A1EC80D258695F886E82296C00949FFC9F20DC503EB
508567C74909251C10FD9058E0D271A9E283E026B834CE434877A667A6747746
DD9A93DBD5E5B3E99B8543E0DE79D340AE473DCD812BC2DED7657A4081DFA221
41C2E1D9F2B2EF325ACD1F7C4442B195973B93788A910FE52DE8B2F334C97C5E
C920DEAABBAFC5740E4DD1816B55D3275BB6B9003A76B68ABE38D46325B4C03B
54ED16EC935013632F8FCE7CF8094A22E0921FF157F2C66B148E036AFB7F4FBE
C3ED82966641447A150BBDC6348D020D72D5E03BC777C3293C7F7CB6E224F98B
E716D3FCBC31870932DAFBEE60F7E16FFB59011A7F61ECC79CA6DF555802D152
7A357373F881B7B6FC55BB4E68F08FFD6B63468BFDC0CB0DC02701195807A320
6DD90C77BC0F1D08D910FF4A50D405E4233304F6FFD3DB13DCE1B4486FD2AA17
923BD44F0BC3857156BB074D5C3B9A9587AB76A6DAFD2CE81D364CE687D7AB26
2EC24AAE40BFC8631A978B4295D7374664F457838D982E043DBE79615A669552
D49352E1D04A6BDF61FC40FE5CE941FA391D8F01472C0373EC89F03A1DF1B7E9
FEF40A6A49252A1AB133FE1F2929C2C82D32C2686DDBFDB882DE14FE66AC9DF4
718CC54BBA0D7B1902169BDDAF4F15EE228948AB38F00E521A071DAE402ABEDA
023011FAAEE69BD4D59C176049C17A46E671E1C2FE4856B91A105F21209052A3
B48861B0840281A129A8A333679936221D4F85CDFCD37675F035137510A473DD
19F770EC0B7DEA00E85C3A3016A88BC53C194D2F8BB39ECE42DB89E05BC6F063
95FE8E6F4459CB7BECD68DE925636784A6302ACBAEB862AB87694A06D629E73B
FF123EAC86584857AEC83D684961F2C48AE4F49A63CDE8BB1644A554C7F18BA7
AA07B026A1D8BC471596E32EFCB31E7243449E24D6250324AB6779B23AC04DCD
E34F60ED2FCBB88048C20DCB99FD2B6CDBA1C774480081D6111237E9B8F88F88
710CD8EE9D430A7A9F814985005F7A23BA42283B3174DC6DA3C12E98463772E0
B95F408BD66D5186C1C9CC4104B76AD9B7816D5E1FE1180E43C2A1ACCC09673A
515D46D7F19DCF31BEF767D530425C528014E46975C0AA920B4349B905DC6CF1
3BA9A0DDF750832015AF3B67BE4E50EEAF51E89F37180143FDCD1FF79C78127C
9E47115F4F9D54F741990538C3CF39FFB86DC70DE7A65C6766313095B38FF55E
84D499CF4F834F785FC78BFAFDAA790E0ED2FC8AF41C5D418651E3B1520B20A3
FD42AC136135D66BEBA7528D442D5E8A808FF0451710E351ACDCA40C795D1353
7B48D6AA7AF9C4B220789620F7C9D773B04A1B42D165BE6601FB57593C9226DF
64F6A0E927EDFE6C834C40DAEE763C6C0AC79F2CC207C41420DAAA917B49CA32
F3BEBD00037137F6F2A5E50A152D64111667D3F04688DFDB703764780E5053AF
0610A0B081E3DE208087DF5481E0CB58417C959B190A8C732F43EB5F7936649C
012BE6A2F9FB89704D509FCD292B6E17273F3E019FF162889168726F83F14B3F
85CBB059645DB42BD92FE6D011BB71133B6C7F28EA32A79F16DE7F7522B5504D
8F17E0F6447E0FF938A3CAE289D7F2541498229C439B53C910426B5F3A69A5E2
767363F26D42A028D06117E65E17F6A5715BFD2292C7E88BDFEA9765F8A91B7F
FD3FE5448BC6A92BC7245CBC6183F321F60481364DD8D21A19408B5F462BEC06
3B9AB18E8D3951CDE4F9798D6E70BC4714DB0B41B23EB6AE93619FB26D615DEE
64F832A27794B2A54D06D0615393B9683BBD445D36E7286B5A6B5A4CA32A4D06
612208DDBDA5942977EED8C92E1FB55E0680AFD4BD85B9A80845B56384EB5F67
9FFDB531A54E5685D47CFAC19A0A804A70B71EF9EE3DF7E9D0D862DE10942D09
98DD1D2452CC9E8C28BCADD16E42DB54072EC76EFD2EB1526D166986AE852E82
51DD46254528A68A1869B38BEB61A7A4A58EB1F386B11EBA1257A97813F72457
F9684DBE23B23C5F061522ACCB563A3B52C1F2FF3CBB427CB821180116B4E2FD
AAB768FCAEC699758A0F3267F96E7B3627D25BB70F3312FFE826D8AC0EEDC2CF
7AF4A925C2C0324A04D9702B3E49828899BCBE1BEB65D059905AB5A7307B9D6D
1F381BDBD34263E8FE026E5775F4A2A76F10F477E969D698B65644425BF3A54E
A87B66C71A24FA132397605692C135EB57F278E814067EAD4964E70CB2C81BB9
B8D341961C4DDBB35C0A3D26B892D018DBC5DC9503FD40F02169B555FFAE6E98
F797D7A4575187D8C31BF9B62C5C85EC72A8A6CFDD556995E8BB425D384127DC
8360D1433E93402E65129339B41C490E723B62F9DE305298FEECA38F1A69CD20
21C62985AC24D4A64F26592F88DBD65BD09D5118D73BE38020D735A7C20B3BBB
075CD26CB24C58957EE5AFC8EB5862110EECE1FE21070F0686E669966E495364
AFB70F25B6E6F6D8E80931C9D28C5874673B883982DFF94F3F1811FB2D171C7D
B50092B8DB68E82FBACB4F1A6D8F323D9DC73AF2DD81A2A5024E56FEF2827E79
6F74B13E357A58B2069CFA2C9917F00ECAA7F5E7D05C7D5C4C4FBBA6C787BB4B
2B36B957E3367CB5E60837A9EDE132953DC0BEFF1D45497AE8A49C45824D1561
F8D8F7735F64E8B8826148CCFE7AF4B40A6AA49EAC5E108E9997F850E356EAEC
5FCFDE9F3299CA0D9D376F6B90D9DAD28637293AF816F690A18FB154C971ED69
20EE9C22AC2142F5E639682F770274E9E936BBC50D28B5649E020992FC3ED9ED
8CEEB6ED8EB4E4438E939D97447E4A792E7F09A3F6F0C49EDABB47A12022A8A3
50B69FE41F3391B8D28C3990471BECE081C77241DDB21157149140ADB28E12E7
DE28E38B70FD19BAD719A097EA5BA1F53D1F1E0BA15B676E4E05573A3CD47424
FE778EEA6810B9B2EC3E75DDA268B148F93314F363483A007CF4509FC36B43B7
20886D5D7218D267F4AB41F5681FF5E2212B59F3CD0D423F40F6FAEB05ADEBE4
C68AF91A9E82917F9449369E3B5F03A6858F96000DA5032AEABAA8AA3B4B676E
E39070F6C9372848909F422B9A861D372D14582B480A6DD44E82C4BD37A14178
5D75D1D962A39EF3007B663E884D18E0F8786D1A22F36C972FB9D5B72AD063D0
4E4AC3AD117137DDC1A13FC6F518149A3626E17A2776378F7D682D1BBCBF7BE1
A34885B4A31304777F906DC0838734F976C696CEEE502236FFC44AF6E5E94CA7
0CB2C82107051B537A31A8BE49BC41F49FE3C0F4DB7087F73E9C12FAAD3E1754
78C4D9E89A08B58B63F8EE5A078DBE76729D694328B0F27A9F00037902A7ECA3
82F27557162AB4B8282C1BCAF71ABDD64423B8667D2EF0D422CA6DF85C311478
11740A47CB154717768E65F8B3466899E49FCA92A7886EA57315031852293CD3
0E0271DA10866B5A3D85CD7F107C20069B812BADC0813D821848CC215D568E3C
7DECA4E4A5EADC0B7527F7629847CCE8C16264B1C21596C807DF5D9C2ECE46FB
7D3A40EB5905FA01FABBA7E210FAC332ED54D8EBEDA15D0E3DAF89F50041C25F
F4E8482BBDB3C4C09590DFA364B148D6775DAE8AB259EB719E1F248738E7B43F
3F15117917D5AD36706C341B9EAE91A0B72F733FEE4E3AF9F3FF861A1BDB2BF8
17E186EA70B144C0802D2CC2CD3C92CE3948DC06EE880413A48A1848F38DF4F5
34E8C94E32E3C925C6AD1BA5A924654B3D7BF0F050D939801BCF850A37607BB1
543EAF167A96599133D317509B7D3B960EE375545410EA00790CFBC2C0F52F48
713AA8FE5DFB2619874B584AAA23D26242B2F46D4B5ED25E1D007FDC67EF6080
6972FD6D7BB669C26B86FB495A18E0A86739939C71D4ACC82D47C96C53BCA4A6
C6EB3D8B3EA8AAE5A992EFD18C6215F7760CDE30BDC78261D511A2FFF561499E
2138F20DA668E246C1A7C122633761B49744C601450C30E15EA125638CE52313
DB2BB5299F182FB960CBA7D8C5E83C19A4BC74956B46B95657066C2DEFBC5DCF
39D8E6BB072F11AF7589DC864E69E0F170B7EBEEE968069217AA1710F0F05DA6
D23B5FDECBC4317D77D88A4ABF6A731AE2CDBD22144FB1C2FFDCEB7DCB4CE963
FADFFD7B19C87434D9F262E81BC11AF86DD2A17CCFAA650C3109C9FF2917CDEC
60400B139132555B7D3CBB632773BEB9C103C76FB6FB89C405B3EE215B9D7221
00D9CE4B73C4B1E01CA4A14A0393B8EAA595E2EB34E58BF6CEBE3F90E8F82D0C
8A7C2D8FEEC3430B37B94235581E469F1EA0DF17255F2EC4AEE96888397AD97A
B151DA16C966F8B36630E68DF6F22B9699E303D2F1D243976AA8CEA40F0FE79E
C0371B7D51DF65C6B46A62E3E32A06B39D58FFE5A70420F32E2AAF41CCCE28B5
C494F319E2FD73A2B9E97D8BC8FC631B317BB62812C342349510A0CA02F40B94
F857DC54159FC599023AE042479393214B0636841FA05B2C9575DBE3F7016A96
398F3F84B9C0BC9EFA0C69DA54A6F2C6A998B10E01D87692E9A0AA4C65F169BA
E1A8FF871015FF0B78A203215CC689DD0B8F53D943E0FE12560B181198C4AA1E
7609AC4F28076C5C2C453ADA74C63AA3BF165CB04E2B2D565D4EE22531B0FCAA
4EAB1A1BC20C986017F58EB059674BC1717C3BC558EC6ACA537C6778BE736984
8E4F4D9F1B238E08DCE419144D8E1D6974547B751E3E9BBC38DF33C9E1E20E61
0F77DD1C07AB01B7B5CBC9563B60F46A49C6C84D271795947E3AABBBADB836A1
E96BE7F8C6E00428DA09D7A3DFC0E08BD912BE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (week_2.dvi)
@start /Fa 240[42 15[{}1 83.022 /CMSY10 rf /Fb 197[23
58[{}1 83.022 /CMMI10 rf /Fc 215[83 40[{}1 83.022 /LINE10
rf
%DVIPSBitmapFont: Fd matha10 10 5
/Fd 5 124 df<000000F0000000000000F0000000000000F0000000000000F000000000
0000F0000000000000F0000000000000F0000000000000F0000000000000F00000000000
00F0000000000000F0000000000000F0000000000000F0000000000000F0000000000000
F0000000000000F0000000000000F0000000000000F0000000000000F0000000000000F0
000000000000F0000000000000F0000000000000F0000000000000F0000000FFFFFFFFFF
FFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0FFFFFFFFFFFFF0000000F0000000000000F00000
00000000F0000000000000F0000000000000F0000000000000F0000000000000F0000000
000000F0000000000000F0000000000000F0000000000000F0000000000000F000000000
0000F0000000000000F0000000000000F0000000000000F0000000000000F00000000000
00F0000000000000F0000000000000F0000000000000F0000000000000F0000000000000
F0000000000000F0000000343479AE41>0 D<FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFF
FFFFFFE0FFFFFFFFFFFFE03304799641>I<20000000107000000038F80000007C7C0000
00F83E000001F01F000003E00F800007C007C0000F8003E0001F0001F0003E0000F8007C
00007C00F800003E01F000001F03E000000F87C0000007CF80000003FF00000001FE0000
0000FC00000000FC00000001FE00000003FF00000007CF8000000F87C000001F03E00000
3E01F000007C00F80000F8007C0001F0003E0003E0001F0007C0000F800F800007C01F00
0003E03E000001F07C000000F8F80000007C70000000382000000010262672A741>I<FF
FFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000FFFFFFFFFFFFE0FFFFFFFF
FFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE03312799D41>16 D<00000001C000000003C000
000003800000000380000000078000000007000000000F000000000E000000000E000000
001E000000001C000000001C000000003C00000000380000000078000000007000000000
7000000000F000000000E000000000E000000001E000000001C000000003C00000000380
00000003800000000780000000070000000007000000000F000000000E000000001E0000
00001C000000001C000000003C0000000038000000003800000000780000000070000000
00F000000000E000000000E000000001E000000001C000000001C000000003C000000003
800000000780000000070000000007000000000F000000000E000000000E000000001E00
0000001C000000003C000000003800000000380000000078000000007000000000700000
0000F000000000E000000001E000000001C000000001C000000003C00000000380000000
0380000000078000000007000000000F000000000E000000000E000000001E000000001C
000000001C000000003C000000003800000000780000000070000000007000000000F000
000000E00000000022537FBD24>123 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe matha7 7 1
/Fe 1 49 df<01FE0007FF800FFFC01F03E03C00F0780078700038F0003CE0001CE0001C
E0001CE0001CE0001CF0003C7000387800783C00F01F03E00FFFC007FF8001FE0016157E
9B1A>48 D E
%EndDVIPSBitmapFont
/Ff 134[37 1[51 1[39 27 28 28 1[39 35 39 59 20 37 22
20 39 35 22 31 39 31 39 35 19[65 3[25 19[35 6[20 1[20
1[35 2[20 39[{}29 66.4176 /CMR8 rf /Fg 135[50 69 1[53
37 38 39 1[53 48 53 80 27 50 1[27 53 2[44 1[42 53 46
12[66 53 1[72 65 2[91 7[63 3[72 6[27 5[48 1[48 48 2[27
4[37 37 27 39[{}33 83.022 /CMBX10 rf /Fh 133[37 44 44
60 44 46 32 33 33 44 46 42 46 69 23 44 25 23 46 42 25
37 46 37 46 42 4[42 4[85 1[62 60 46 3[65 62 76 3[30 62
1[54 57 63 60 59 62 1[39 4[23 42 42 42 42 42 42 42 42
42 42 1[23 28 23 2[32 32 23 1[69 2[42 19[69 1[46 48 11[{}65
83.022 /CMR10 rf /Fi 134[40 2[38 1[28 34 35 1[42 42 47
68 21 2[25 42 1[25 38 1[38 38 42 11[62 1[47 2[56 2[74
8[63 59 58 7[25 13[25 44[{}26 83.022 /CMTI10 rf /Fj 139[44
44 46 1[62 56 62 1[31 59 1[31 62 2[51 3[54 9[116 2[78
62 4[88 106 6[70 2[81 1[85 14[56 56 56 48[{}23 99.6264
/CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -8 -316
a
SDict begin H.S end
 -8 -316 a 0 TeXcolorgray Black -8 -316 a
SDict begin H.R end
 -8 -316 a
-8 -316 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -8 -316 a 0 TeXcolorgray Black 0 TeXcolorgray
0 27 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 0 27 a 0 27 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 0 27 a 0 27 a
SDict begin H.S end
 0 27 a 0 27 a
SDict begin 12 H.A end
 0 27
a 0 27 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 0 27 a 1609 110 a Fj(W)-9 b(eek)38 b(2)f(Notes)1528
209 y(Astro)f(1)i(F)-9 b(all)38 b(2012)1690 367 y Fi(Matt)30
b(Coleman)783 467 y(Dep)l(artment)f(of)i(Physics:)40
b(University)30 b(of)h(California,)i(Santa)c(Barb)l(ar)l(a)1469
608 y Fh(Up)r(dated)f(Octob)r(er)f(11,)g(2012)p 0 743
3901 4 v 0 763 V 0 949 a Fj(Celestial)38 b(Sphere)0 1022
y
SDict begin H.S end
 0 1022 a 0 1022 a
SDict begin 12 H.A end
 0 1022 a 0 1022 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 0 1022 a 80 x Fh(The)29
b(b)r(o)r(ok)g(do)r(es)g(a)f(go)r(o)r(d)h(job)g(of)g(explaining)g
(this,)g(so)g(I)g(am)g(only)g(w)n(orking)e(through)h(example)h
(problems)f(here.)41 b(If)30 b(y)n(ou)0 1202 y(need)35
b(an)f(explanation)f(of)i(the)g(celestial)f(sphere)g(then)h(see)f
(section)g(2-4)f(of)h(the)h(text,)i(also)c(y)n(ou)h(migh)n(t)h(\014nd)f
(Fig)h(2-11)0 1301 y(useful)28 b(for)f(the)h(homew)n(ork.)0
1517 y Fg(Mars)k(Example)0 1587 y
SDict begin H.S end
 0 1587 a 0 1587 a
SDict begin 12 H.A end
 0
1587 a 0 1587 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 0 1587 a 83 x Ff(*I)26 b(just)f(w)n(an)n(t)h(to)g
(clarify)e(that)i(y)n(ou)g(don't)g(need)g(to)g(kno)n(w)f(an)n(ything)i
(ab)r(out)f(Mars)f(for)f(the)i(time)f(b)r(eing,)h(y)n(ou)g(will)e
(learn)h(ab)r(out)h(the)g(planets)0 1770 y(later)e(in)f(the)i(course.)
31 b(I)24 b(only)g(use)g(Mars)f(so)g(that)i(I)f(am)g(not)g(doing)g
(problem)g(5)g(for)e(y)n(ou.)0 1969 y Fh(Imagine)27 b(y)n(ou)g(are)f
(an)i(astronaut)e(on)h(Mars,)g(where)g(the)h(y)n(ear)e(is)i(668)e
(Martian)h(da)n(ys)f(long.)0 2101 y
SDict begin H.S end
 0 2101 a 0 2101 a
SDict begin 12 H.A end

0 2101 a 0 2101 a
SDict begin [/View [/XYZ H.V]/Dest (section*.3) cvn /DEST pdfmark end
 0 2101 a 84 x Fg(Question:)81 b Fh(Ho)n(w)27
b(long)g(do)r(es)g(it)h(tak)n(e)f(the)h(sun)g(go)f(around)f(the)i
(Martian)f(celestial)g(sphere?)0 2317 y
SDict begin H.S end
 0 2317 a 0 2317
a
SDict begin 12 H.A end
 0 2317 a 0 2317 a
SDict begin [/View [/XYZ H.V]/Dest (section*.4) cvn /DEST pdfmark end
 0 2317 a 84 x Fg(Answ)m(er:)83 b
Fh(It)35 b(tak)n(es)g(ab)r(out)g(1)g(Martian)f(y)n(ear)g(or)g(668)g
(Martian)h(da)n(ys)f(for)g(the)i(sun)f(to)h(go)e(all)h(the)g(w)n(a)n(y)
f(around)h(the)0 2500 y(Martian)27 b(celestial)g(sphere.)0
2633 y
SDict begin H.S end
 0 2633 a 0 2633 a
SDict begin 12 H.A end
 0 2633 a 0 2633 a
SDict begin [/View [/XYZ H.V]/Dest (section*.5) cvn /DEST pdfmark end
 0 2633 a 83
x Fg(Question:)81 b Fh(Ho)n(w)27 b(far)g(do)r(es)h(the)g(Sun)g(mo)n(v)n
(e)e(on)h(the)h(Martian)f(celestial)g(sphere)g(in)h(one)f(Martian)g(da)
n(y?)0 2848 y
SDict begin H.S end
 0 2848 a 0 2848 a
SDict begin 12 H.A end
 0 2848 a 0 2848 a
SDict begin [/View [/XYZ H.V]/Dest (section*.6) cvn /DEST pdfmark end
 0 2848
a 84 x Fg(Answ)m(er:)83 b Fh(F)-7 b(rom)31 b(the)g(previous)f(question)
h(w)n(e)g(already)e(kno)n(w)i(that)g(the)h(sun)f(mo)n(v)n(es)f(360)2964
2902 y Fe(0)3024 2932 y Fh(on)h(the)g(Martian)g(celestial)0
3032 y(sphere)c(in)h(one)f(Martian)g(y)n(ear.)35 b(W)-7
b(e)28 b(can)f(think)i(of)e(this)h(as)f(a)g(sp)r(eed)h(that)g(w)n(e)f
(need)h(to)f(con)n(v)n(ert.)136 3259 y(Angular)g(sp)r(eed)c
Fd(\020)972 3202 y Fh(360)1098 3172 y Fe(0)p 778 3240
543 4 v 778 3316 a Fh(1)812 3338 y Fc(\()895 3324 y(\()978
3311 y(\()1061 3297 y(\()1144 3283 y(\()1227 3269 y(\()1246
3266 y(\()848 3316 y Fh(Martian)j(y)n(ear)1349 3259 y
Fd(\002)1488 3202 y Fh(1)1522 3225 y Fc(\()1605 3211
y(\()1688 3198 y(\()1771 3184 y(\()1854 3170 y(\()1937
3156 y(\()1956 3153 y(\()1558 3202 y Fh(Martian)g(y)n(ear)p
1442 3240 635 4 v 1442 3316 a(668)g(Martian)h(da)n(ys)2110
3259 y Fd(\020)2448 3202 y Fh(360)2574 3172 y Fe(0)p
2208 3240 V 2208 3316 a Fh(668)f(Martian)h(da)n(ys)2876
3259 y Fd(\020)22 b Fh(0)p Fb(:)p Fh(54)3112 3224 y Fe(0)3169
3259 y Fh(p)r(er)27 b(Martian)g(da)n(y)0 3481 y(So)j(ev)n(ery)e
(Martian)h(da)n(y)g(the)h(sun)g(mo)n(v)n(es)f(ab)r(out)g(half)h(a)g
(degree)e(on)i(the)g(Martian)f(celestial)h(sphere.)42
b(Note,)31 b(this)f(is)g(the)0 3580 y(same)d(as)g(sa)n(ying)f(that)i
(on)f(Mars)g(the)h(sun)f(mo)n(v)n(es)g(ab)r(out)g(half)h(a)f(degree)g
(with)h(resp)r(ect)f(to)h(distan)n(t)f(stars)g(ev)n(ery)f(da)n(y)-7
b(.)0 3813 y Fj(Seasons)0 3866 y
SDict begin H.S end
 0 3866 a 0 3866 a
SDict begin 12 H.A end
 0
3866 a 0 3866 a
SDict begin [/View [/XYZ H.V]/Dest (section*.7) cvn /DEST pdfmark end
 0 3866 a 100 x Fh(Again)27 b(the)h(text)g(do)r(es)f(a)h
(go)r(o)r(d)e(job)i(here)f(\(see)h(section)f(2-5\),)g(but)h(I)g(w)n(an)
n(ted)f(to)g(p)r(oin)n(t)h(out)f(a)h(few)f(things.)125
4066 y(So,)33 b(what)g(exactly)f(causes)f(the)i(seasons?)51
b(Man)n(y)31 b(b)r(eliev)n(e)i(that)g(Earth's)e(orbit)h(around)g(the)h
(sun)f(is)h(not)g(a)f(p)r(erfect)0 4165 y(circle,)25
b(and)g(therefore)g(when)g(the)h(Earth)f(is)g(closer)f(to)h(the)h(sun,)
g(it)g(is)f(summer)g(time.)37 b(When)25 b(w)n(e)g(are)g(further)g(a)n
(w)n(a)n(y)e(from)0 4265 y(the)33 b(sun)f(w)n(e)g(are)g(in)g(win)n
(ter.)51 b(If)33 b(there)f(w)n(ere)g(true)g(then)h(then)g(the)g(United)
g(States)f(in)h(the)g(northern)e(hemisphere)h(and)0 4364
y(Australia)d(in)i(the)g(southern)e(hemisphere)h(w)n(ould)g(ha)n(v)n(e)
f(win)n(ter)h(at)g(the)h(same)f(time)h(of)f(y)n(ear.)43
b(Ho)n(w)n(ev)n(er,)29 b(w)n(e)h(kno)n(w)g(this)0 4464
y(is)h(wrong.)47 b(Australians)31 b(get)g(to)g(enjo)n(y)g(summer)g(in)h
(Decem)n(b)r(er.)48 b(It)32 b(is)f(true)g(that)h(the)g(Earth's)e(orbit)
h(is)g(not)h(a)f(p)r(erfect)0 4564 y(circle,)i(ho)n(w)n(ev)n(er,)f(its)
g(distance)g(from)g(the)h(sun)g(only)f(deviates)g(ab)r(out)g(2\045)g
(of)h(its)f(a)n(v)n(erage.)49 b(This)32 b(is)g(closer)f(to)i(a)f
(circle)0 4663 y(then)26 b(I)g(w)n(ould)f(ev)n(er)g(b)r(e)h(able)f(to)h
(dra)n(w)e(b)n(y)i(hand.)36 b(As)26 b(w)n(e)f(will)h(see,)g(it)g(is)g
(the)g(Earth's)e(tilt)j(that)f(is)f(to)h(blame)f(for)g(our)g(cold)0
4763 y(win)n(ter)i(mon)n(ths.)0 4979 y Fg(Tilt)0 5032
y
SDict begin H.S end
 0 5032 a 0 5032 a
SDict begin 12 H.A end
 0 5032 a 0 5032 a
SDict begin [/View [/XYZ H.V]/Dest (section*.8) cvn /DEST pdfmark end
 0 5032 a 100 x
Fh(The)h(Earth's)e(axis)g(is)i(tilted)g(23)p Fb(:)p Fh(5)1085
5102 y Fe(0)1141 5132 y Fh(with)g(resp)r(ect)f(to)h(its)f(orbital)g
(plane)g(\(see)g(Figures)g(2-12\).)35 b(It)28 b(is)g(this)f(tilt,)i
(that)e(is)h(the)0 5232 y(origin)e(of)i(the)g(seasons.)35
b(There)27 b(are)g(t)n(w)n(o)g(main)g(e\013ects)h(that)g(this)g(tilt)g
(causes)f(whic)n(h)g(lead)h(to)f(the)h(seasons.)p 0 TeXcolorgray
125 5398 a Fa(\017)p 0 TeXcolorgray 41 w Fh(Changes)e(in)i(the)g(amoun)
n(t)f(of)h(da)n(yligh)n(t)e(hours)h(in)h(the)g(da)n(y)f(\(see)g
(Figures)g(2-12)f(and)h(2-17\).)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -8 -316
a
SDict begin H.S end
 -8 -316 a 0 TeXcolorgray 0 TeXcolorgray -8 -316 a
SDict begin H.R end
 -8
-316 a -8 -316 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -8 -316 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 125 110 a Fa(\017)p 0 TeXcolorgray 41
w Fh(Changes)26 b(in)i(angle)f(at)g(whic)n(h)h(sunligh)n(t)f(hits)h
(the)g(surface)f(of)g(the)h(Earth)f(\(see)g(Figure)g(2-13\).)0
276 y(T)-7 b(o)27 b(understand)g(wh)n(y)h(Earth's)e(tilt)j(causes)d
(these)i(e\013ects)g(see)f(the)h(text.)125 375 y(The)c(second)h
(e\013ect)g(listed)g(here)g(ma)n(y)f(b)r(e)h(more)f(di\016cult)i(to)f
(understand.)35 b(Think)25 b(of)g(sho)r(oting)f(a)h(arro)n(w)e(at)h(a)h
(target.)0 475 y(If)30 b(y)n(our)e(arro)n(w)f(hits)j(\\dead)e(on")h(or)
f(p)r(erp)r(endicular)i(to)f(y)n(our)f(target)g(then)i(y)n(ou)f
(maximize)g(the)h(impact)f(and)g(maximize)0 575 y(the)g(amoun)n(t)g(of)
g(energy)e(transfered)h(in)n(to)h(the)h(target.)40 b(Similarly)-7
b(,)28 b(if)i(the)f(sun)g(is)g(directly)g(o)n(v)n(erhead)e(\(at)i(the)g
(zenith\))h(it)0 674 y(maximizes)j(the)g(amoun)n(t)g(of)g(heat)g
(transfered)f(to)h(the)h(earth.)53 b(The)33 b(other)g(extreme)f(is)h(a)
g(glancing)f(blo)n(w)h(where)f(y)n(our)0 774 y(arro)n(w)19
b(hits)i(the)h(target)e(almost)g(parallel)g(to)h(it)h(transferring)d(v)
n(ery)h(little)i(energy)e(to)h(it.)35 b(Similarly)-7
b(,)22 b(as)f(the)g(sun)g(approac)n(hes)0 873 y(the)28
b(horizon)e(it)i(b)r(ecome)g(less)f(e\013ectiv)n(e)h(at)f(heating)g
(the)h(Earth.)0 1006 y
SDict begin H.S end
 0 1006 a 0 1006 a
SDict begin 12 H.A end
 0 1006 a 0 1006
a
SDict begin [/View [/XYZ H.V]/Dest (section*.9) cvn /DEST pdfmark end
 0 1006 a 83 x Fg(The)k(Sun's)f(P)m(ath:)43 b(The)32
b(Ecliptic)0 1189 y Fh(The)24 b(sun's)f(path)h(through)e(the)i
(celestial)f(sphere,)h(called)f(the)h(Ecliptic,)g(is)g(caused)e(b)n(y)i
(the)g(tilt)g(of)f(the)h(Earth's)e(axis.)35 b(This)0
1288 y(path)c(is)g(a)g(circle)g(around)f(the)i(celestial)e(sphere)h
(whic)n(h)g(mak)n(es)f(a)h(23)p Fb(:)p Fh(5)2306 1258
y Fe(0)2366 1288 y Fh(angle)f(with)i(the)f(celestial)g(equator,)g(the)h
(same)0 1388 y(angle)f(as)h(the)h(Earth's)e(tilt.)52
b(See)32 b(Figure)g(2-15)e(for)i(a)g(detailed)g(picture)g(and)h(note)f
(the)g(lo)r(cation)g(of)g(the)h(solstices)e(and)0 1488
y(equino)n(xes.)36 b(The)27 b(sun's)g(p)r(osition)g(on)g(the)h
(celestial)e(sphere)h(is)g(also)f(related)h(to)g(the)h(path)f(the)h
(sun)f(will)h(tak)n(e)e(on)h(a)g(giv)n(en)0 1587 y(da)n(y)g(at)g(a)g
(giv)n(en)g(lo)r(cation)g(\(see)h(Figure)f(2-16\).)0
1803 y Fg(Examples)0 1873 y
SDict begin H.S end
 0 1873 a 0 1873 a
SDict begin 12 H.A end
 0 1873
a 0 1873 a
SDict begin [/View [/XYZ H.V]/Dest (section*.10) cvn /DEST pdfmark
end
 0 1873 a 0 1873 a
SDict begin H.S end
 0 1873 a 0 1873 a
SDict begin 12 H.A end
 0 1873
a 0 1873 a
SDict begin [/View [/XYZ H.V]/Dest (section*.11) cvn /DEST pdfmark
end
 0 1873 a 83 x Fg(Example)38 b(1:)82 b Fh(Ho)n(w)33
b(far)f(ab)r(o)n(v)n(e)g(the)i(southern)e(horizon)g(will)i(the)f(sun)g
(b)r(e)h(in)f(San)n(ta)g(Barbara)e(\(ab)r(out)i(35)3539
1926 y Fe(0)3601 1956 y Fh(north)g(of)0 2056 y(the)d(equator\))g(at)f
(high)h(no)r(on)g(during)g(the)g Fg(\(a\))h Fh(summer)f(solstice,)g
Fg(\(b\))g Fh(v)n(ernal)f(and)h(autumnal)g(equino)n(xes,)g
Fg(\(c\))g Fh(win)n(ter)0 2156 y(solstice?)0 2272 y
SDict begin H.S end
 0
2272 a 0 2272 a
SDict begin 12 H.A end
 0 2272 a 0 2272 a
SDict begin [/View [/XYZ H.V]/Dest (section*.12) cvn /DEST pdfmark
end
 0 2272 a 99 x Fg(Answ)m(er)83
b Fh(The)32 b(most)f(imp)r(ortan)n(t)g(piece)h(of)f(information)g(giv)n
(en)g(in)h(this)g(problem)f(is)g(the)h(latitude,)h(35)3407
2341 y Fe(0)3468 2371 y Fh(north.)48 b(This)0 2471 y(giv)n(es)29
b(y)n(ou)g(the)i(angle)e(b)r(et)n(w)n(een)h(the)h(zenith)g(and)f(the)g
(sun)g(at)g(no)r(on)g(on)g(either)g(equino)n(x)f(\(see)i(Figure)3326
2471 y
SDict begin H.S end
 3326 2471 a 0 TeXcolorgray Fh(1)p 0 TeXcolorgray
3368 2418 a
SDict begin H.R end
 3368 2418 a 3368 2471 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (figure.1) cvn H.B /ANN pdfmark end
 3368 2471 a Fh(\).)45
b(This)30 b(almost)0 2571 y(gets)d(us)h(the)g(answ)n(er)e(to)i(part)f
(b,)h(but)g(what)g(w)n(e)f(really)g(need)g(is)h(the)g(complemen)n(tary)
e(angle,)h(90)3111 2541 y Fe(0)3159 2571 y Fd(\001)18
b Fh(35)3326 2541 y Fe(0)3378 2571 y Fd(\020)23 b Fh(55)3550
2541 y Fe(0)3579 2571 y Fh(.)37 b(So)28 b(no)n(w)0 2670
y(that)34 b(w)n(e)f(ha)n(v)n(e)g(the)h(elev)-5 b(ation)33
b(of)h(the)g(sun)g(at)f(no)r(on)g(on)h(the)g(equino)n(x)f(w)n(e)g(can)g
(w)n(e)h(can)f(add)g(23)p Fb(:)p Fh(5)3215 2640 y Fe(0)3278
2670 y Fh(to)g(part)h(b)g(for)f(the)0 2770 y(summer)27
b(solstice,)g(and)h(subtract)f(23)p Fb(:)p Fh(5)1263
2740 y Fe(0)1319 2770 y Fh(from)g(part)h(b)f(for)g(the)h(win)n(ter)g
(solstice.)p 0 TeXcolorgray 0 TeXcolorgray 1492 3026
a(Figure)f(1:)1855 3026 y
SDict begin H.S end
 1855 3026 a 0 TeXcolorgray
0 TeXcolorgray 1855 3026 a
SDict begin H.R end
 1855 3026 a 1855 3026 a
SDict begin [/View [/XYZ H.V]/Dest (figure.1) cvn /DEST pdfmark end
 1855
3026 a Fh(Solar)g(Elev)-5 b(ation)p 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 1950 4094 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.75  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 0.0 14.45377 14.45377 14.45377
14.45377 0.0   /Lineto /lineto load def false 0  setlinejoin  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2
x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0.75  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.75  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 0.0 115.63242 0.0 0.0   /Lineto
/lineto load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0.75  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.75  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 108.40498 125. PtoC 0.0 0.0
  /Lineto /lineto load def false 0  setlinejoin  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2
y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos mul add
y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{ /ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.
 cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0.75  setgray  1. .setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.75  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 108.40498 148.5 PtoC 0.0 0.0
108.40498 101.5 PtoC   /Lineto /lineto load def false 0  setlinejoin
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos
mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat
} ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto
} repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW
0.75  setgray  1. .setopacityalpha  0 setlinecap [  5.0  3.0 ] 0 0
add   dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength
} ifelse /b ED dup /X ED 0 get /y ED /z 0 X {add} forall def b a .5
sub 2 mul y mul sub z Div round z mul a .5 sub 2 mul y mul add b exch
Div /z ED false X { z mul } forall X astore {0 gt or} forall { X 1
a sub y mul } { [ 1 0 ] 0 } ifelse setdash stroke   grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1 0  setcmykcolor  [ 108.40498
148.5 PtoC 108.40498 101.5 PtoC  false NArray /DS 2.0 2. CLW mul add
2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot
{ moveto gsave 2.  2.  scale (b) show grestore } bind def  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  0.0 0.0 /y ED /x ED /r 108.40498 def /c 57.2957 r Div def /angleA
101.5 0.0 c mul 2 div add def /angleB 148.5 0.0 c mul 2 div sub def
/angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA
{ ArrowA CP } r 0 gt { { add } } { { sub } } ifelse ArcArrow angleB
{ ArrowB } r 0 gt { { sub } } { { add } } ifelse ArcArrow dup angleA
gt angleAtoB xor { pop angleA } if arc  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1 0  setcmykcolor  [ 108.40498
125. PtoC  false NArray /DS 2.0 2. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 2.  2.  scale
(b) show grestore } bind def  newpath n { transform floor .5 add exch
floor .5 add exch itransform Dot } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  0.0 0.0 /y ED /x ED /r 57.81621 def /c 57.2957 r Div def /angleA
101.5 0.0 c mul 2 div add def /angleB 125. 0.0 c mul 2 div sub def
/angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA
{ ArrowA CP } r 0 gt { { add } } { { sub } } ifelse ArcArrow angleB
{ ArrowB } r 0 gt { { sub } } { { add } } ifelse ArcArrow dup angleA
gt angleAtoB xor { pop angleA } if arc  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial
1950 4094 a
 tx@Dict begin { 61.42993 113. PtoC } PutCoor PutBegin  end
 1950 4094 a -89 w Fh(23)p Fb(:)p Fh(5)2010
4064 y Fe(0)1950 4094 y
 tx@Dict begin  PutEnd  end
 1950 4094 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  0.0 0.0 /y ED /x ED /r 57.81621 def /c 57.2957 r Div def /angleA
125. 0.0 c mul 2 div add def /angleB 148.5 0.0 c mul 2 div sub def
/angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA
{ ArrowA CP } r 0 gt { { add } } { { sub } } ifelse ArcArrow angleB
{ ArrowB } r 0 gt { { sub } } { { add } } ifelse ArcArrow dup angleA
gt angleAtoB xor { pop angleA } if arc  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha  0 setlinecap stroke  grestore end


@endspecial 1950 4094 a
 tx@Dict begin { 61.42993 132. PtoC } PutCoor PutBegin  end
 1950 4094 a 1772 4125 a Fh(23)p
Fb(:)p Fh(5)1921 4095 y Fe(0)1950 4094 y
 tx@Dict begin  PutEnd  end
 1950 4094 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  0.0 0.0 /y ED /x ED /r 36.135 def /c
57.2957 r Div def /angleA 90. 0.0 c mul 2 div add def /angleB 125.
0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false
} ifelse def x y r angleA angleB arc  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial 1950 4094 a
 tx@Dict begin { 39.7487 107.5 PtoC } PutCoor PutBegin  end
 1950
4094 a -57 w Fh(35)1977 4064 y Fe(0)1950 4094 y
 tx@Dict begin  PutEnd  end
 1950
4094 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  0.0 0.0 /y ED /x ED /r 21.68121 def /c
57.2957 r Div def /angleA 125. 0.0 c mul 2 div add def /angleB 180.
0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false
} ifelse def x y r angleA angleB arc  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha  0 setlinecap stroke  grestore end
 
@endspecial 1950 4094
a
 tx@Dict begin { 22.40352 160. PtoC } PutCoor PutBegin  end
 1950 4094 a 1837 4125 a Fh(55)1921 4095 y Fe(0)1950
4094 y
 tx@Dict begin  PutEnd  end
 1950 4094 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2
div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  0.0 0.0 /y ED /x ED /r 72.26999 def /c 57.2957 r Div def /angleA
148.5 0.0 c mul 2 div add def /angleB 180. 0.0 c mul 2 div sub def
/angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA
{ ArrowA CP } r 0 gt { { add } } { { sub } } ifelse ArcArrow angleB
arc  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0 setlinecap [
 5.0  3.0 ] 0 -1 add   dup 0 gt { /a .5 def PathLength exch div } {
pop /a 1 def PathLength } ifelse /b ED dup /X ED 0 get /y ED /z 0 X
{add} forall def b a .5 sub 2 mul y mul sub z Div round z mul a .5
sub 2 mul y mul add b exch Div /z ED false X { z mul } forall X astore
{0 gt or} forall { X 1 a sub y mul } { [ 1 0 ] 0 } ifelse setdash stroke
  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2
div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  0.0 0.0 /y ED /x ED /r 83.11003 def /c 57.2957 r Div def /angleA
125. 0.0 c mul 2 div add def /angleB 180. 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA { ArrowA
CP } r 0 gt { { add } } { { sub } } ifelse ArcArrow angleB arc  gsave
0.8 SLW 0  setgray  1. .setopacityalpha  0 setlinecap [  5.0  3.0 ]
0 -1 add   dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED dup /X ED 0 get /y ED /z 0 X {add} forall
def b a .5 sub 2 mul y mul sub z Div round z mul a .5 sub 2 mul y mul
add b exch Div /z ED false X { z mul } forall X astore {0 gt or} forall
{ X 1 a sub y mul } { [ 1 0 ] 0 } ifelse setdash stroke   grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { } def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2
div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  0.0 0.0 /y ED /x ED /r 93.9512 def /c 57.2957 r Div def /angleA
101.5 0.0 c mul 2 div add def /angleB 180. 0.0 c mul 2 div sub def
/angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA
{ ArrowA CP } r 0 gt { { add } } { { sub } } ifelse ArcArrow angleB
arc  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0 setlinecap [
 5.0  3.0 ] 0 -1 add   dup 0 gt { /a .5 def PathLength exch div } {
pop /a 1 def PathLength } ifelse /b ED dup /X ED 0 get /y ED /z 0 X
{add} forall def b a .5 sub 2 mul y mul sub z Div round z mul a .5
sub 2 mul y mul add b exch Div /z ED false X { z mul } forall X astore
{0 gt or} forall { X 1 a sub y mul } { [ 1 0 ] 0 } ifelse setdash stroke
  grestore end
 
@endspecial 1950 4094 a
 tx@Dict begin { -72.26999 -9.39545 } PutCoor PutBegin  end
 1950 4094 a -18
w Fh(c)1950 4094 y
 tx@Dict begin  PutEnd  end
 1950 4094 a 1950 4094 a
 tx@Dict begin { -83.11003 -9.39545 } PutCoor PutBegin  end
 1950 4094
a -23 w Fh(b)1950 4094 y
 tx@Dict begin  PutEnd  end
 1950 4094 a 1950 4094 a
 tx@Dict begin { -93.9512 -9.39545 } PutCoor PutBegin  end
 1950
4094 a -21 w Fh(a)1950 4094 y
 tx@Dict begin  PutEnd  end
 1950 4094 a 1950 4094 a
 tx@Dict begin { 108.40498 100. PtoC } PutCoor PutBegin  end

1950 4094 a -22 x Fh(Summer)1964 4172 y(Solstice)1950
4094 y
 tx@Dict begin  PutEnd  end
 1950 4094 a 1950 4094 a
 tx@Dict begin { 108.40498 150. PtoC } PutCoor PutBegin  end
 1950 4094 a 1673 4072
a Fh(Win)n(ter)1664 4172 y(Solstice)1950 4094 y
 tx@Dict begin  PutEnd  end
 1950
4094 a 1950 4094 a
 tx@Dict begin { 122.85875 125. PtoC } PutCoor PutBegin  end
 1950 4094 a 1791 4078 a Fh(Equano)n(x)1950
4094 y
 tx@Dict begin  PutEnd  end
 1950 4094 a 1950 4094 a
 tx@Dict begin { 115.63242 0.0 } PutCoor PutBegin  end
 1950 4094 a 1978 4123
a Fh(North)1950 4094 y
 tx@Dict begin  PutEnd  end
 1950 4094 a 1950 4094 a
 tx@Dict begin { -115.63242 0.0 } PutCoor PutBegin  end
 1950 4094
a 1710 4123 a Fh(South)1950 4094 y
 tx@Dict begin  PutEnd  end
 1950 4094 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 115.63242 0.0 -115.63242 0.0   /Lineto
/lineto load def false 0  setlinejoin  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /Length x2 x1 sub y2 y1 sub Pyth def
/dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add def ArrowPos
Length gt { exit } if x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 2.0 SLW 0  setgray  1. .setopacityalpha
 0 setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray 0 4430 a
SDict begin H.S end
 0 4430
a 0 4430 a
SDict begin 12 H.A end
 0 4430 a 0 4430 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 0 4430 a 0 TeXcolorgray
116 x Fh(\(a\))p 0 TeXcolorgray 42 w(55)232 4516 y Fe(0)279
4546 y Fd(\000)18 b Fh(23)p Fb(:)p Fh(5)511 4516 y Fe(0)563
4546 y Fd(\020)23 b Fh(78)p Fb(:)p Fh(5)800 4516 y Fe(0)0
4600 y
SDict begin H.S end
 0 4600 a 0 4600 a
SDict begin 12 H.A end
 0 4600 a 0 4600 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 0 4600 a 0
TeXcolorgray -5 4712 a Fh(\(b\))p 0 TeXcolorgray 43 w(55)232
4682 y Fe(0)0 4766 y
SDict begin H.S end
 0 4766 a 0 4766 a
SDict begin 12 H.A end
 0 4766 a 0 4766
a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 0 4766 a 0 TeXcolorgray 5 4878 a Fh(\(c\))p 0 TeXcolorgray
42 w(55)232 4848 y Fe(0)279 4878 y Fd(\001)18 b Fh(23)p
Fb(:)p Fh(5)511 4848 y Fe(0)563 4878 y Fd(\020)23 b Fh(31)p
Fb(:)p Fh(5)800 4848 y Fe(0)0 5015 y
SDict begin H.S end
 0 5015 a 0 5015
a
SDict begin 12 H.A end
 0 5015 a 0 5015 a
SDict begin [/View [/XYZ H.V]/Dest (section*.13) cvn /DEST pdfmark
end
 0 5015 a 79 x Fg(Example)28 b(2)h(\(Problem)f(2.42)
g(in)g(textb)s(o)s(ok\):)83 b Fh(The)25 b(cit)n(y)g(of)g(Mum)n(bai)g
(\(formerly)f(Bom)n(ba)n(y\))g(in)h(India)g(is)g(19)3647
5064 y Fe(0)3701 5094 y Fh(north)0 5194 y(of)35 b(the)g(equator.)57
b(On)35 b(ho)n(w)f(man)n(y)g(da)n(ys)g(of)h(the)g(y)n(ear,)h(if)f(an)n
(y)-7 b(,)36 b(is)f(the)g(Sun)g(at)g(the)g(zenith)g(at)g(midda)n(y)g
(as)f(seen)g(from)0 5294 y(Mum)n(bai?)j(Explain)27 b(y)n(our)f(answ)n
(er.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -8 -316
a
SDict begin H.S end
 -8 -316 a 0 TeXcolorgray 0 TeXcolorgray -8 -316 a
SDict begin H.R end
 -8
-316 a -8 -316 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -8 -316 a 0 TeXcolorgray 0 TeXcolorgray
0 27 a
SDict begin H.S end
 0 27 a 0 27 a
SDict begin 12 H.A end
 0 27 a 0 27 a
SDict begin [/View [/XYZ H.V]/Dest (section*.14) cvn /DEST pdfmark
end
 0 27 a 83 x Fg(Solution:)81
b Fh(Because)30 b(Mum)n(bai)h(is)g(b)r(et)n(w)n(een)f(the)i(t)n(w)n(o)e
(tropics)g(w)n(e)g(kno)n(w)g(that)i(the)f(sun)g(will)g(past)f(the)i
(zenith.)47 b(Since)0 209 y(Mum)n(bai)26 b(is)f(north)g(of)h(the)g
(equator,)f(the)h(sun)g(will)g(mo)n(v)n(e)e(north)h(past)h(the)g
(zenith)g(as)f(the)h(summer)f(solstice)g(approac)n(hes.)0
309 y(After)30 b(the)g(summer)f(solstice)g(the)h(sun)g(will)f(mo)n(v)n
(e)g(past)g(the)h(zenith)g(again.)42 b(Therefore,)29
b(there)g(are)f(t)n(w)n(o)h(da)n(ys)g(in)h(where)0 408
y(the)e(Sun)g(at)f(the)h(zenith)h(at)e(midda)n(y)-7 b(.)0
641 y Fj(The)38 b(Mo)s(on)0 694 y
SDict begin H.S end
 0 694 a 0 694 a
SDict begin 12 H.A end
 0 694
a 0 694 a
SDict begin [/View [/XYZ H.V]/Dest (section*.15) cvn /DEST pdfmark
end
 0 694 a 100 x Fh(I)28 b(didn't)g(talk)f(m)n(uc)n(h)h(ab)r
(out)f(the)h(mo)r(on)g(but)g(Figures)f(3-2)f(and)h(3-8)g(will)h(b)r(e)g
(helpful)g(for)f(the)h(homew)n(ork.)0 1010 y Fg(Example)0
1080 y
SDict begin H.S end
 0 1080 a 0 1080 a
SDict begin 12 H.A end
 0 1080 a 0 1080 a
SDict begin [/View [/XYZ H.V]/Dest (section*.16) cvn /DEST pdfmark
end
 0 1080 a 83
x Fh(The)j(mo)r(on)g(has)g(an)g(angular)e(diameter)i(of)g(1)p
Fd({)p Fh(2)1548 1133 y Fe(0)1577 1163 y Fh(.)47 b(If)32
b(the)g(edge)e(of)h(the)h(mo)r(on)f(just)h(past)f(o)n(v)n(er)e(a)i
(distan)n(t)g(star,)g(what)g(is)0 1263 y(the)d(most)f(the)h(mo)r(on)g
(has)f(to)g(mo)n(v)n(e)g(b)r(efore)g(the)h(star)f(is)g(visible)h
(again?)0 1395 y
SDict begin H.S end
 0 1395 a 0 1395 a
SDict begin 12 H.A end
 0 1395 a 0 1395 a
SDict begin [/View [/XYZ H.V]/Dest (section*.17) cvn /DEST pdfmark
end

0 1395 a 84 x Fg(Answ)m(er:)83 b Fh(1)p Fd({)p Fh(2)542
1448 y Fe(0)570 1479 y Fh(.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
